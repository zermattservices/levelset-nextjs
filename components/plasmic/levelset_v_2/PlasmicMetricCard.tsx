/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: 7uoOAZgc5EOu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TrendCard from "../../TrendCard"; // plasmic-import: V-0rig617-gC/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicMetricCard.module.css"; // plasmic-import: 7uoOAZgc5EOu/css

createPlasmicElementProxy;

export type PlasmicMetricCard__VariantMembers = {};
export type PlasmicMetricCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicMetricCard__VariantsArgs;
export const PlasmicMetricCard__VariantProps = new Array<VariantPropType>();

export type PlasmicMetricCard__ArgsType = {
  metricName?: React.ReactNode;
  children?: React.ReactNode;
  metricTotal2?: React.ReactNode;
  delta?: React.ReactNode;
  heading5?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMetricCard__ArgsType;
export const PlasmicMetricCard__ArgProps = new Array<ArgPropType>(
  "metricName",
  "children",
  "metricTotal2",
  "delta",
  "heading5"
);

export type PlasmicMetricCard__OverridesType = {
  root?: Flex__<"div">;
  metricItem?: Flex__<"div">;
  titleAndTrend?: Flex__<"div">;
  number?: Flex__<"div">;
  trendCard?: Flex__<typeof TrendCard>;
  supportingMetrics?: Flex__<"div">;
  numberAndBadge?: Flex__<"div">;
  heading?: Flex__<"div">;
  metricTotal?: Flex__<"div">;
  heading3?: Flex__<"div">;
  numberAndBadge2?: Flex__<"div">;
};

export interface DefaultMetricCardProps {
  metricName?: React.ReactNode;
  children?: React.ReactNode;
  metricTotal2?: React.ReactNode;
  delta?: React.ReactNode;
  heading5?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMetricCard__RenderFunc(props: {
  variants: PlasmicMetricCard__VariantsArgs;
  args: PlasmicMetricCard__ArgsType;
  overrides: PlasmicMetricCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "trendCard.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "5.8"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};

        $steps["goToPage"] = true
          ? (() => {
              const actionArgs = {
                destination: (() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __nextRouter?.push(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToPage"] != null &&
          typeof $steps["goToPage"] === "object" &&
          typeof $steps["goToPage"].then === "function"
        ) {
          $steps["goToPage"] = await $steps["goToPage"];
        }
      }}
    >
      <div
        data-plasmic-name={"metricItem"}
        data-plasmic-override={overrides.metricItem}
        className={classNames(projectcss.all, sty.metricItem)}
      >
        <div
          data-plasmic-name={"titleAndTrend"}
          data-plasmic-override={overrides.titleAndTrend}
          className={classNames(projectcss.all, sty.titleAndTrend)}
        >
          <div
            data-plasmic-name={"number"}
            data-plasmic-override={overrides.number}
            className={classNames(projectcss.all, sty.number)}
          >
            {renderPlasmicSlot({
              defaultContents: "Pathway Completion",
              value: args.metricName,
              className: classNames(sty.slotTargetMetricName)
            })}
          </div>
          <TrendCard
            data-plasmic-name={"trendCard"}
            data-plasmic-override={overrides.trendCard}
            className={classNames("__wab_instance", sty.trendCard)}
            onValueChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["trendCard", "value"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            value={generateStateValueProp($state, ["trendCard", "value"])}
          />
        </div>
        <div
          data-plasmic-name={"supportingMetrics"}
          data-plasmic-override={overrides.supportingMetrics}
          className={classNames(projectcss.all, sty.supportingMetrics)}
        >
          <div
            data-plasmic-name={"numberAndBadge"}
            data-plasmic-override={overrides.numberAndBadge}
            className={classNames(projectcss.all, sty.numberAndBadge)}
          >
            <div
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(projectcss.all, sty.heading)}
            >
              {renderPlasmicSlot({
                defaultContents: "Total:",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
            <div
              data-plasmic-name={"metricTotal"}
              data-plasmic-override={overrides.metricTotal}
              className={classNames(projectcss.all, sty.metricTotal)}
            >
              {renderPlasmicSlot({
                defaultContents: "17",
                value: args.metricTotal2,
                className: classNames(sty.slotTargetMetricTotal2)
              })}
            </div>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hX5Po
                  )}
                >
                  {"+3"}
                </div>
              ),
              value: args.delta,
              className: classNames(sty.slotTargetDelta)
            })}
            <div
              data-plasmic-name={"heading3"}
              data-plasmic-override={overrides.heading3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.heading3
              )}
            >
              {" over Last Month"}
            </div>
          </div>
          <div
            data-plasmic-name={"numberAndBadge2"}
            data-plasmic-override={overrides.numberAndBadge2}
            className={classNames(projectcss.all, sty.numberAndBadge2)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hFBub
                  )}
                >
                  {"September"}
                </div>
              ),
              value: args.heading5,
              className: classNames(sty.slotTargetHeading5)
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "metricItem",
    "titleAndTrend",
    "number",
    "trendCard",
    "supportingMetrics",
    "numberAndBadge",
    "heading",
    "metricTotal",
    "heading3",
    "numberAndBadge2"
  ],
  metricItem: [
    "metricItem",
    "titleAndTrend",
    "number",
    "trendCard",
    "supportingMetrics",
    "numberAndBadge",
    "heading",
    "metricTotal",
    "heading3",
    "numberAndBadge2"
  ],
  titleAndTrend: ["titleAndTrend", "number", "trendCard"],
  number: ["number"],
  trendCard: ["trendCard"],
  supportingMetrics: [
    "supportingMetrics",
    "numberAndBadge",
    "heading",
    "metricTotal",
    "heading3",
    "numberAndBadge2"
  ],
  numberAndBadge: ["numberAndBadge", "heading", "metricTotal", "heading3"],
  heading: ["heading"],
  metricTotal: ["metricTotal"],
  heading3: ["heading3"],
  numberAndBadge2: ["numberAndBadge2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metricItem: "div";
  titleAndTrend: "div";
  number: "div";
  trendCard: typeof TrendCard;
  supportingMetrics: "div";
  numberAndBadge: "div";
  heading: "div";
  metricTotal: "div";
  heading3: "div";
  numberAndBadge2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMetricCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMetricCard__VariantsArgs;
    args?: PlasmicMetricCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMetricCard__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMetricCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMetricCard__ArgProps,
          internalVariantPropNames: PlasmicMetricCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMetricCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMetricCard";
  } else {
    func.displayName = `PlasmicMetricCard.${nodeName}`;
  }
  return func;
}

export const PlasmicMetricCard = Object.assign(
  // Top-level PlasmicMetricCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metricItem: makeNodeComponent("metricItem"),
    titleAndTrend: makeNodeComponent("titleAndTrend"),
    number: makeNodeComponent("number"),
    trendCard: makeNodeComponent("trendCard"),
    supportingMetrics: makeNodeComponent("supportingMetrics"),
    numberAndBadge: makeNodeComponent("numberAndBadge"),
    heading: makeNodeComponent("heading"),
    metricTotal: makeNodeComponent("metricTotal"),
    heading3: makeNodeComponent("heading3"),
    numberAndBadge2: makeNodeComponent("numberAndBadge2"),

    // Metadata about props expected for PlasmicMetricCard
    internalVariantProps: PlasmicMetricCard__VariantProps,
    internalArgProps: PlasmicMetricCard__ArgProps
  }
);

export default PlasmicMetricCard;
/* prettier-ignore-end */
