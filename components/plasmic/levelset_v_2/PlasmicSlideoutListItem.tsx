/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: cUTmStBqQImV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicSlideoutListItem.module.css"; // plasmic-import: cUTmStBqQImV/css

import Divider3Icon from "./icons/PlasmicIcon__Divider3"; // plasmic-import: K2tYHr-lcp8R/icon
import Trash01Icon from "./icons/PlasmicIcon__Trash01"; // plasmic-import: 9yy7XVDaeY1L/icon

createPlasmicElementProxy;

export type PlasmicSlideoutListItem__VariantMembers = {};
export type PlasmicSlideoutListItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicSlideoutListItem__VariantsArgs;
export const PlasmicSlideoutListItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSlideoutListItem__ArgsType = {};
type ArgPropType = keyof PlasmicSlideoutListItem__ArgsType;
export const PlasmicSlideoutListItem__ArgProps = new Array<ArgPropType>();

export type PlasmicSlideoutListItem__OverridesType = {
  fileUploadItemBase5?: Flex__<"div">;
  content12?: Flex__<"div">;
  fileTypeIcon5?: Flex__<"div">;
  fileType5?: Flex__<"div">;
  content13?: Flex__<"div">;
  textAndSupportingText7?: Flex__<"div">;
  text28?: Flex__<"div">;
  supportingTextAndPercentage5?: Flex__<"div">;
  supportingText11?: Flex__<"div">;
  iconAndPercentage5?: Flex__<"div">;
  percentage5?: Flex__<"div">;
  supportingText12?: Flex__<"div">;
  frame7?: Flex__<"div">;
  text29?: Flex__<"div">;
  text30?: Flex__<"div">;
  buttonsButtonUtility5?: Flex__<"div">;
};

export interface DefaultSlideoutListItemProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSlideoutListItem__RenderFunc(props: {
  variants: PlasmicSlideoutListItem__VariantsArgs;
  args: PlasmicSlideoutListItem__ArgsType;
  overrides: PlasmicSlideoutListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"fileUploadItemBase5"}
      data-plasmic-override={overrides.fileUploadItemBase5}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.fileUploadItemBase5
      )}
    >
      <div
        data-plasmic-name={"content12"}
        data-plasmic-override={overrides.content12}
        className={classNames(projectcss.all, sty.content12)}
      >
        {false ? (
          <div
            data-plasmic-name={"fileTypeIcon5"}
            data-plasmic-override={overrides.fileTypeIcon5}
            className={classNames(projectcss.all, sty.fileTypeIcon5)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__e8NIs)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"32px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/levelset_v_2/images/page.svg",
                fullWidth: 32,
                fullHeight: 40,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"fileType5"}
              data-plasmic-override={overrides.fileType5}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.fileType5
              )}
            >
              {"MP4"}
            </div>
          </div>
        ) : null}
        <div
          data-plasmic-name={"content13"}
          data-plasmic-override={overrides.content13}
          className={classNames(projectcss.all, sty.content13)}
        >
          <div
            data-plasmic-name={"textAndSupportingText7"}
            data-plasmic-override={overrides.textAndSupportingText7}
            className={classNames(projectcss.all, sty.textAndSupportingText7)}
          >
            <div
              data-plasmic-name={"text28"}
              data-plasmic-override={overrides.text28}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text28
              )}
            >
              {"Coaching conversation and formal write up"}
            </div>
            <div
              data-plasmic-name={"supportingTextAndPercentage5"}
              data-plasmic-override={overrides.supportingTextAndPercentage5}
              className={classNames(
                projectcss.all,
                sty.supportingTextAndPercentage5
              )}
            >
              <div
                data-plasmic-name={"supportingText11"}
                data-plasmic-override={overrides.supportingText11}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.supportingText11
                )}
              >
                {"10/12/2025"}
              </div>
              <Divider3Icon
                className={classNames(projectcss.all, sty.svg__bwUhY)}
                role={"img"}
              />

              <div
                data-plasmic-name={"iconAndPercentage5"}
                data-plasmic-override={overrides.iconAndPercentage5}
                className={classNames(projectcss.all, sty.iconAndPercentage5)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__y8TGo)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/levelset_v_2/images/user023.svg",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"percentage5"}
                  data-plasmic-override={overrides.percentage5}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.percentage5
                  )}
                >
                  {"Traci Danmeyer-Rodgers"}
                </div>
              </div>
              {false ? (
                <Divider3Icon
                  className={classNames(projectcss.all, sty.svg__yvcpn)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <div
                  data-plasmic-name={"supportingText12"}
                  data-plasmic-override={overrides.supportingText12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText12
                  )}
                >
                  {"Not Informed"}
                </div>
              ) : null}
            </div>
          </div>
          {false ? (
            <div
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                data-plasmic-name={"text29"}
                data-plasmic-override={overrides.text29}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text29
                )}
              >
                {"10"}
              </div>
              <div
                data-plasmic-name={"text30"}
                data-plasmic-override={overrides.text30}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text30
                )}
              >
                {"points"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
      {false ? (
        <div
          data-plasmic-name={"buttonsButtonUtility5"}
          data-plasmic-override={overrides.buttonsButtonUtility5}
          className={classNames(projectcss.all, sty.buttonsButtonUtility5)}
        >
          <Trash01Icon
            className={classNames(projectcss.all, sty.svg___0YpYj)}
            role={"img"}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  fileUploadItemBase5: [
    "fileUploadItemBase5",
    "content12",
    "fileTypeIcon5",
    "fileType5",
    "content13",
    "textAndSupportingText7",
    "text28",
    "supportingTextAndPercentage5",
    "supportingText11",
    "iconAndPercentage5",
    "percentage5",
    "supportingText12",
    "frame7",
    "text29",
    "text30",
    "buttonsButtonUtility5"
  ],
  content12: [
    "content12",
    "fileTypeIcon5",
    "fileType5",
    "content13",
    "textAndSupportingText7",
    "text28",
    "supportingTextAndPercentage5",
    "supportingText11",
    "iconAndPercentage5",
    "percentage5",
    "supportingText12",
    "frame7",
    "text29",
    "text30"
  ],
  fileTypeIcon5: ["fileTypeIcon5", "fileType5"],
  fileType5: ["fileType5"],
  content13: [
    "content13",
    "textAndSupportingText7",
    "text28",
    "supportingTextAndPercentage5",
    "supportingText11",
    "iconAndPercentage5",
    "percentage5",
    "supportingText12",
    "frame7",
    "text29",
    "text30"
  ],
  textAndSupportingText7: [
    "textAndSupportingText7",
    "text28",
    "supportingTextAndPercentage5",
    "supportingText11",
    "iconAndPercentage5",
    "percentage5",
    "supportingText12"
  ],
  text28: ["text28"],
  supportingTextAndPercentage5: [
    "supportingTextAndPercentage5",
    "supportingText11",
    "iconAndPercentage5",
    "percentage5",
    "supportingText12"
  ],
  supportingText11: ["supportingText11"],
  iconAndPercentage5: ["iconAndPercentage5", "percentage5"],
  percentage5: ["percentage5"],
  supportingText12: ["supportingText12"],
  frame7: ["frame7", "text29", "text30"],
  text29: ["text29"],
  text30: ["text30"],
  buttonsButtonUtility5: ["buttonsButtonUtility5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  fileUploadItemBase5: "div";
  content12: "div";
  fileTypeIcon5: "div";
  fileType5: "div";
  content13: "div";
  textAndSupportingText7: "div";
  text28: "div";
  supportingTextAndPercentage5: "div";
  supportingText11: "div";
  iconAndPercentage5: "div";
  percentage5: "div";
  supportingText12: "div";
  frame7: "div";
  text29: "div";
  text30: "div";
  buttonsButtonUtility5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlideoutListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSlideoutListItem__VariantsArgs;
    args?: PlasmicSlideoutListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSlideoutListItem__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSlideoutListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSlideoutListItem__ArgProps,
          internalVariantPropNames: PlasmicSlideoutListItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSlideoutListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "fileUploadItemBase5") {
    func.displayName = "PlasmicSlideoutListItem";
  } else {
    func.displayName = `PlasmicSlideoutListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSlideoutListItem = Object.assign(
  // Top-level PlasmicSlideoutListItem renders the root element
  makeNodeComponent("fileUploadItemBase5"),
  {
    // Helper components rendering sub-elements
    content12: makeNodeComponent("content12"),
    fileTypeIcon5: makeNodeComponent("fileTypeIcon5"),
    fileType5: makeNodeComponent("fileType5"),
    content13: makeNodeComponent("content13"),
    textAndSupportingText7: makeNodeComponent("textAndSupportingText7"),
    text28: makeNodeComponent("text28"),
    supportingTextAndPercentage5: makeNodeComponent(
      "supportingTextAndPercentage5"
    ),
    supportingText11: makeNodeComponent("supportingText11"),
    iconAndPercentage5: makeNodeComponent("iconAndPercentage5"),
    percentage5: makeNodeComponent("percentage5"),
    supportingText12: makeNodeComponent("supportingText12"),
    frame7: makeNodeComponent("frame7"),
    text29: makeNodeComponent("text29"),
    text30: makeNodeComponent("text30"),
    buttonsButtonUtility5: makeNodeComponent("buttonsButtonUtility5"),

    // Metadata about props expected for PlasmicSlideoutListItem
    internalVariantProps: PlasmicSlideoutListItem__VariantProps,
    internalArgProps: PlasmicSlideoutListItem__ArgProps
  }
);

export default PlasmicSlideoutListItem;
/* prettier-ignore-end */
