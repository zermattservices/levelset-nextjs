/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: eJlFBj1x_mCN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import LevelsetButton from "../../LevelsetButton"; // plasmic-import: u704oB_4BUvT/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import LogoutButton from "../../LogoutButton"; // plasmic-import: UwKJxxQFYiGw/component
import { SupabaseUserLogOut } from "../../CodeComponents/auth/SupabaseUserLogOut"; // plasmic-import: l-xO2VjafQ7l/codeComponent
import DashboardSubmenu from "../../DashboardSubmenu"; // plasmic-import: DnrJ08NISsSS/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicMenuNavigation.module.css"; // plasmic-import: eJlFBj1x_mCN/css

import CheckSvgIcon from "../levelset_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: dTo8s4EZdHvA/icon
import IconIcon from "../levelset_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: CEbmjO_n9jaW/icon
import CircleDotFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__CircleDotFilled"; // plasmic-import: PL4O-3ScZjiD/icon
import ChevronSelectorVerticalIcon from "./icons/PlasmicIcon__ChevronSelectorVertical"; // plasmic-import: cjzcuVmo8rE7/icon

createPlasmicElementProxy;

export type PlasmicMenuNavigation__VariantMembers = {
  dashboardOpen: "dashboardOpen";
};
export type PlasmicMenuNavigation__VariantsArgs = {
  dashboardOpen?: SingleBooleanChoiceArg<"dashboardOpen">;
};
type VariantPropType = keyof PlasmicMenuNavigation__VariantsArgs;
export const PlasmicMenuNavigation__VariantProps = new Array<VariantPropType>(
  "dashboardOpen"
);

export type PlasmicMenuNavigation__ArgsType = {
  headerLocationId?: string;
  onHeaderLocationIdChange?: (val: string) => void;
  firstName?: string;
  onFirstNameChange?: (val: string) => void;
  userRole?: string;
  onUserRoleChange?: (val: string) => void;
  logoutShown?: boolean;
  lastName?: string;
  onLastNameChange?: (val: string) => void;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMenuNavigation__ArgsType;
export const PlasmicMenuNavigation__ArgProps = new Array<ArgPropType>(
  "headerLocationId",
  "onHeaderLocationIdChange",
  "firstName",
  "onFirstNameChange",
  "userRole",
  "onUserRoleChange",
  "logoutShown",
  "lastName",
  "onLastNameChange",
  "children2",
  "children3",
  "children"
);

export type PlasmicMenuNavigation__OverridesType = {
  root?: Flex__<"div">;
  logo?: Flex__<typeof PlasmicImg__>;
  form?: Flex__<typeof FormWrapper>;
  formField?: Flex__<typeof FormItemWrapper>;
  select?: Flex__<typeof AntdSelect>;
  button?: Flex__<typeof AntdButton>;
  logoutButton?: Flex__<typeof LogoutButton>;
  account?: Flex__<typeof PlasmicImg__>;
  supabaseUserLogOut?: Flex__<typeof SupabaseUserLogOut>;
};

export interface DefaultMenuNavigationProps {
  headerLocationId?: string;
  onHeaderLocationIdChange?: (val: string) => void;
  firstName?: string;
  onFirstNameChange?: (val: string) => void;
  userRole?: string;
  onUserRoleChange?: (val: string) => void;
  logoutShown?: boolean;
  lastName?: string;
  onLastNameChange?: (val: string) => void;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children?: React.ReactNode;
  dashboardOpen?: SingleBooleanChoiceArg<"dashboardOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuNavigation__RenderFunc(props: {
  variants: PlasmicMenuNavigation__VariantsArgs;
  args: PlasmicMenuNavigation__ArgsType;
  overrides: PlasmicMenuNavigation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          logoutShown: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "headerLocationId",
        type: "writable",
        variableType: "text",

        valueProp: "headerLocationId",
        onChangeProp: "onHeaderLocationIdChange"
      },
      {
        path: "firstName",
        type: "writable",
        variableType: "text",

        valueProp: "firstName",
        onChangeProp: "onFirstNameChange"
      },
      {
        path: "userRole",
        type: "writable",
        variableType: "text",

        valueProp: "userRole",
        onChangeProp: "onUserRoleChange"
      },
      {
        path: "dashboardOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dashboardOpen
      },
      {
        path: "logoutShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lastName",
        type: "writable",
        variableType: "text",

        valueProp: "lastName",
        onChangeProp: "onLastNameChange"
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    locationsQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "c177dd7a-eae9-4081-b6fb-a0298c0d1929",
        userArgs: {
          filters: ["54b9864f-9df9-4a15-a209-7b99e1c274f4"]
        },
        cacheKey: `plasmic.$.c177dd7a-eae9-4081-b6fb-a0298c0d1929.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootdashboardOpen]: hasVariant(
            $state,
            "dashboardOpen",
            "dashboardOpen"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qAtX2)}>
        <div className={classNames(projectcss.all, sty.freeBox__a3UdP)}>
          <PlasmicImg__
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            alt={""}
            className={classNames(sty.logo)}
            displayHeight={"auto"}
            displayMaxHeight={"48px"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100px"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
            src={{
              src: "/plasmic/levelset_v_2/images/levelsetNoMargingPng.png",
              fullWidth: 800,
              fullHeight: 250,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox___9Xy55)}>
            <LevelsetButton
              className={classNames(
                "__wab_instance",
                sty.levelsetButton___5Tvwa
              )}
              color={"clear"}
              onClick={async event => {
                const $steps = {};

                $steps["updateDashboardOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "dashboardOpen",
                        operation: 2,
                        value: "dashboardOpen"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDashboardOpen"] != null &&
                  typeof $steps["updateDashboardOpen"] === "object" &&
                  typeof $steps["updateDashboardOpen"].then === "function"
                ) {
                  $steps["updateDashboardOpen"] =
                    await $steps["updateDashboardOpen"];
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ayRwz
                )}
              >
                {"Dashboards"}
              </div>
            </LevelsetButton>
            <LevelsetButton
              className={classNames(
                "__wab_instance",
                sty.levelsetButton__fBkbv
              )}
              color={"clear"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mNyQw
                )}
              >
                {"Admin"}
              </div>
            </LevelsetButton>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xTe9W)}>
          <div className={classNames(projectcss.all, sty.freeBox__sltyv)}>
            <CircleDotFilledIcon
              className={classNames(projectcss.all, sty.svg__muTh2)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__tQdjE)}>
              <div className={classNames(projectcss.all, sty.freeBox___68KqT)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerLocationId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Buda FSU";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.children2,
                  className: classNames(sty.slotTargetChildren2)
                })}
              </div>
            </div>
            <ChevronSelectorVerticalIcon
              className={classNames(projectcss.all, sty.svg__jzG4)}
              role={"img"}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rkbjc)}>
          <div className={classNames(projectcss.all, sty.freeBox___1LyUp)}>
            <div className={classNames(projectcss.all, sty.freeBox__agUzE)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);

                    (async (changedValues, allValues) => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  initialValues: (() => {
                    try {
                      return $queries.locationsQuery.data[0].id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "67e00fb2-29f5-41ce-9c1c-93e2f7f392dd";
                      }
                      throw e;
                    }
                  })(),
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"formField"}
                      data-plasmic-override={overrides.formField}
                      className={classNames("__wab_instance", sty.formField)}
                      initialValue={(() => {
                        try {
                          return $queries.locationsQuery.data[0].id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      label={"Label"}
                      name={"header_location_id"}
                      noLabel={true}
                      noStyle={false}
                      rules={[{ ruleType: "required" }]}
                      valuePropName={"selectedLocation"}
                    >
                      <AntdSelect
                        data-plasmic-name={"select"}
                        data-plasmic-override={overrides.select}
                        className={classNames("__wab_instance", sty.select)}
                        defaultOpen={false}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          styleTokensClassNames
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null, type: "option" },
                            { value: null, label: null, type: "option" }
                          ];
                          __composite["0"]["value"] =
                            $queries.locationsQuery.data[0].id;
                          __composite["0"]["label"] =
                            $queries.locationsQuery.data[0].name;
                          __composite["1"]["value"] =
                            $queries.locationsQuery.data[1].id;
                          __composite["1"]["label"] =
                            $queries.locationsQuery.data[1].name;
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select__popup"]}
                        value={generateStateValueProp($state, [
                          "select",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      disabled={false}
                      submitsForm={false}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sVc4F
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pKjWu)}>
              <div className={classNames(projectcss.all, sty.freeBox__cVk2)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wg9Jo
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontStyle: "italic" }}
                          >
                            {"Hello, "}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gFy0A
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.firstName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Reece Howard";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </React.Fragment>
                  ),
                  value: args.children3,
                  className: classNames(sty.slotTargetChildren3)
                })}
              </div>
              <LogoutButton
                data-plasmic-name={"logoutButton"}
                data-plasmic-override={overrides.logoutButton}
                className={classNames("__wab_instance", sty.logoutButton)}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kYv9N)}>
              <div className={classNames(projectcss.all, sty.freeBox__yUskQ)}>
                <PlasmicImg__
                  data-plasmic-name={"account"}
                  data-plasmic-override={overrides.account}
                  alt={""}
                  className={classNames(sty.account)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"24px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/levelset_v_2/images/userLevelsetSvg2.svg",
                    fullWidth: 38,
                    fullHeight: 40,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <SupabaseUserLogOut
              data-plasmic-name={"supabaseUserLogOut"}
              data-plasmic-override={overrides.supabaseUserLogOut}
              className={classNames("__wab_instance", sty.supabaseUserLogOut)}
              onSuccess={async () => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }

                $steps["goToLoginPage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/auth/login` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLoginPage"] != null &&
                  typeof $steps["goToLoginPage"] === "object" &&
                  typeof $steps["goToLoginPage"].then === "function"
                ) {
                  $steps["goToLoginPage"] = await $steps["goToLoginPage"];
                }
              }}
            >
              {(() => {
                try {
                  return $state.logoutShow;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LevelsetButton
                  className={classNames(
                    "__wab_instance",
                    sty.levelsetButton__seDk6
                  )}
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Hkr
                    )}
                  >
                    {"Logout"}
                  </div>
                </LevelsetButton>
              ) : null}
            </SupabaseUserLogOut>
          </div>
        </div>
      </div>
      {(
        hasVariant($state, "dashboardOpen", "dashboardOpen")
          ? true
          : (() => {
              try {
                return $state.dashboardOpen;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___8OAdU, {
            [sty.freeBoxdashboardOpen___8OAdUkDcoZ]: hasVariant(
              $state,
              "dashboardOpen",
              "dashboardOpen"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <DashboardSubmenu
                className={classNames(
                  "__wab_instance",
                  sty.dashboardSubmenu__zwXjo
                )}
              />
            ),

            value: args.children
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logo",
    "form",
    "formField",
    "select",
    "button",
    "logoutButton",
    "account",
    "supabaseUserLogOut"
  ],
  logo: ["logo"],
  form: ["form", "formField", "select", "button"],
  formField: ["formField", "select"],
  select: ["select"],
  button: ["button"],
  logoutButton: ["logoutButton"],
  account: ["account"],
  supabaseUserLogOut: ["supabaseUserLogOut"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof PlasmicImg__;
  form: typeof FormWrapper;
  formField: typeof FormItemWrapper;
  select: typeof AntdSelect;
  button: typeof AntdButton;
  logoutButton: typeof LogoutButton;
  account: typeof PlasmicImg__;
  supabaseUserLogOut: typeof SupabaseUserLogOut;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuNavigation__VariantsArgs;
    args?: PlasmicMenuNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMenuNavigation__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMenuNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuNavigation__ArgProps,
          internalVariantPropNames: PlasmicMenuNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuNavigation";
  } else {
    func.displayName = `PlasmicMenuNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuNavigation = Object.assign(
  // Top-level PlasmicMenuNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    form: makeNodeComponent("form"),
    formField: makeNodeComponent("formField"),
    select: makeNodeComponent("select"),
    button: makeNodeComponent("button"),
    logoutButton: makeNodeComponent("logoutButton"),
    account: makeNodeComponent("account"),
    supabaseUserLogOut: makeNodeComponent("supabaseUserLogOut"),

    // Metadata about props expected for PlasmicMenuNavigation
    internalVariantProps: PlasmicMenuNavigation__VariantProps,
    internalArgProps: PlasmicMenuNavigation__ArgProps
  }
);

export default PlasmicMenuNavigation;
/* prettier-ignore-end */
