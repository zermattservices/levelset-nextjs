/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: eJlFBj1x_mCN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import DashboardSubmenu from "../../DashboardSubmenu"; // plasmic-import: DnrJ08NISsSS/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicMenuNavigation.module.css"; // plasmic-import: eJlFBj1x_mCN/css

import CircleDotFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__CircleDotFilled"; // plasmic-import: PL4O-3ScZjiD/icon
import ChevronSelectorVerticalIcon from "./icons/PlasmicIcon__ChevronSelectorVertical"; // plasmic-import: cjzcuVmo8rE7/icon
import DotsVerticalIcon from "./icons/PlasmicIcon__DotsVertical"; // plasmic-import: Nj_WO85Tkuxp/icon

createPlasmicElementProxy;

export type PlasmicMenuNavigation__VariantMembers = {
  dashboardOpen: "dashboardOpen";
};
export type PlasmicMenuNavigation__VariantsArgs = {
  dashboardOpen?: SingleBooleanChoiceArg<"dashboardOpen">;
};
type VariantPropType = keyof PlasmicMenuNavigation__VariantsArgs;
export const PlasmicMenuNavigation__VariantProps = new Array<VariantPropType>(
  "dashboardOpen"
);

export type PlasmicMenuNavigation__ArgsType = {
  locationName?: string;
  onLocationNameChange?: (val: string) => void;
  firstName?: string;
  onFirstNameChange?: (val: string) => void;
  userRole?: string;
  onUserRoleChange?: (val: string) => void;
  logoutShown?: boolean;
  lastName?: string;
  onLastNameChange?: (val: string) => void;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  slot3?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMenuNavigation__ArgsType;
export const PlasmicMenuNavigation__ArgProps = new Array<ArgPropType>(
  "locationName",
  "onLocationNameChange",
  "firstName",
  "onFirstNameChange",
  "userRole",
  "onUserRoleChange",
  "logoutShown",
  "lastName",
  "onLastNameChange",
  "children2",
  "children3",
  "children4",
  "slot3",
  "children"
);

export type PlasmicMenuNavigation__OverridesType = {
  root?: Flex__<"div">;
  logo?: Flex__<typeof PlasmicImg__>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultMenuNavigationProps {
  locationName?: string;
  onLocationNameChange?: (val: string) => void;
  firstName?: string;
  onFirstNameChange?: (val: string) => void;
  userRole?: string;
  onUserRoleChange?: (val: string) => void;
  logoutShown?: boolean;
  lastName?: string;
  onLastNameChange?: (val: string) => void;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  slot3?: React.ReactNode;
  children?: React.ReactNode;
  dashboardOpen?: SingleBooleanChoiceArg<"dashboardOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuNavigation__RenderFunc(props: {
  variants: PlasmicMenuNavigation__VariantsArgs;
  args: PlasmicMenuNavigation__ArgsType;
  overrides: PlasmicMenuNavigation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          logoutShown: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "locationName",
        type: "writable",
        variableType: "text",

        valueProp: "locationName",
        onChangeProp: "onLocationNameChange"
      },
      {
        path: "firstName",
        type: "writable",
        variableType: "text",

        valueProp: "firstName",
        onChangeProp: "onFirstNameChange"
      },
      {
        path: "userRole",
        type: "writable",
        variableType: "text",

        valueProp: "userRole",
        onChangeProp: "onUserRoleChange"
      },
      {
        path: "dashboardOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dashboardOpen
      },
      {
        path: "logoutShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lastName",
        type: "writable",
        variableType: "text",

        valueProp: "lastName",
        onChangeProp: "onLastNameChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootdashboardOpen]: hasVariant(
            $state,
            "dashboardOpen",
            "dashboardOpen"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qAtX2)}>
        <div className={classNames(projectcss.all, sty.freeBox__a3UdP)}>
          <PlasmicImg__
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            alt={""}
            className={classNames(sty.logo)}
            displayHeight={"auto"}
            displayMaxHeight={"48px"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"128px"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
            src={{
              src: "/plasmic/levelset_v_2/images/horizontalLockupPrimarySm1.png",
              fullWidth: 1000,
              fullHeight: 250,
              aspectRatio: undefined
            }}
          />

          <AntdButton
            className={classNames("__wab_instance", sty.button___5Tvwa)}
            ghost={false}
            loading={false}
            onClick={async () => {
              const $steps = {};

              $steps["updateDashboardOpen"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "dashboardOpen",
                      operation: 2,
                      value: "dashboardOpen"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDashboardOpen"] != null &&
                typeof $steps["updateDashboardOpen"] === "object" &&
                typeof $steps["updateDashboardOpen"].then === "function"
              ) {
                $steps["updateDashboardOpen"] =
                  await $steps["updateDashboardOpen"];
              }
            }}
            shape={"default"}
            type={"ghost"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ayRwz
              )}
            >
              {"Dashboards"}
            </div>
          </AntdButton>
          <AntdButton
            className={classNames("__wab_instance", sty.button__fBkbv)}
            type={"ghost"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mNyQw
              )}
            >
              {"Admin"}
            </div>
          </AntdButton>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xTe9W)}>
          <div className={classNames(projectcss.all, sty.freeBox__sltyv)}>
            <CircleDotFilledIcon
              className={classNames(projectcss.all, sty.svg__muTh2)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__tQdjE)}>
              <div className={classNames(projectcss.all, sty.freeBox___68KqT)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.locationName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Buda FSU";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.children2,
                  className: classNames(sty.slotTargetChildren2)
                })}
              </div>
            </div>
            <ChevronSelectorVerticalIcon
              className={classNames(projectcss.all, sty.svg__jzG4)}
              role={"img"}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rkbjc)}>
          <div className={classNames(projectcss.all, sty.freeBox___1LyUp)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/levelset_v_2/images/circleCCfaPng.png",
                fullWidth: 4167,
                fullHeight: 4167,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__pKjWu)}>
              <div className={classNames(projectcss.all, sty.freeBox__cVk2)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.firstName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Reece Howard";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.children3,
                  className: classNames(sty.slotTargetChildren3)
                })}
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.lastName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Reece Howard";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.children4,
                  className: classNames(sty.slotTargetChildren4)
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__cxGXx)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.userRole;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Owner/Operator";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.slot3,
                  className: classNames(sty.slotTargetSlot3)
                })}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kYv9N)}>
              <DotsVerticalIcon
                className={classNames(projectcss.all, sty.svg__qxnzD)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLogoutShow"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["logoutShow"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLogoutShow"] != null &&
                    typeof $steps["updateLogoutShow"] === "object" &&
                    typeof $steps["updateLogoutShow"].then === "function"
                  ) {
                    $steps["updateLogoutShow"] =
                      await $steps["updateLogoutShow"];
                  }
                }}
                role={"img"}
              />
            </div>
            {(() => {
              try {
                return $state.logoutShow;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <AntdButton
                className={classNames("__wab_instance", sty.button__seDk6)}
                loading={false}
                onClick={async () => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return async () => {
                              const { getSupabaseClient } = await import(
                                "~/lib/supabase-client"
                              );
                              const supabase = getSupabaseClient();
                              await supabase.auth.signOut();
                              window.location.href = "/auth/login";
                            };
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Hkr
                  )}
                >
                  {"Logout"}
                </div>
              </AntdButton>
            ) : null}
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___8OAdU, {
          [sty.freeBoxdashboardOpen___8OAdUkDcoZ]: hasVariant(
            $state,
            "dashboardOpen",
            "dashboardOpen"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <DashboardSubmenu
              className={classNames(
                "__wab_instance",
                sty.dashboardSubmenu__zwXjo
              )}
            />
          ),

          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "img"],
  logo: ["logo"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof PlasmicImg__;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuNavigation__VariantsArgs;
    args?: PlasmicMenuNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMenuNavigation__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMenuNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuNavigation__ArgProps,
          internalVariantPropNames: PlasmicMenuNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuNavigation";
  } else {
    func.displayName = `PlasmicMenuNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuNavigation = Object.assign(
  // Top-level PlasmicMenuNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMenuNavigation
    internalVariantProps: PlasmicMenuNavigation__VariantProps,
    internalArgProps: PlasmicMenuNavigation__ArgProps
  }
);

export default PlasmicMenuNavigation;
/* prettier-ignore-end */
