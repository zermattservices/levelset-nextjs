/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: V-0rig617-gC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicTrendCard.module.css"; // plasmic-import: V-0rig617-gC/css

import ArrowUpIcon from "./icons/PlasmicIcon__ArrowUp"; // plasmic-import: ZIsm7_rPo0FL/icon
import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: movxudIE5wqS/icon

createPlasmicElementProxy;

export type PlasmicTrendCard__VariantMembers = {
  negative: "negative";
};
export type PlasmicTrendCard__VariantsArgs = {
  negative?: SingleBooleanChoiceArg<"negative">;
};
type VariantPropType = keyof PlasmicTrendCard__VariantsArgs;
export const PlasmicTrendCard__VariantProps = new Array<VariantPropType>(
  "negative"
);

export type PlasmicTrendCard__ArgsType = {
  text3?: React.ReactNode;
  value?: string;
  onValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTrendCard__ArgsType;
export const PlasmicTrendCard__ArgProps = new Array<ArgPropType>(
  "text3",
  "value",
  "onValueChange"
);

export type PlasmicTrendCard__OverridesType = {
  root?: Flex__<"div">;
  change?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultTrendCardProps {
  text3?: React.ReactNode;
  value?: string;
  onValueChange?: (val: string) => void;
  negative?: SingleBooleanChoiceArg<"negative">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTrendCard__RenderFunc(props: {
  variants: PlasmicTrendCard__VariantsArgs;
  args: PlasmicTrendCard__ArgsType;
  overrides: PlasmicTrendCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "negative",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.negative
      },
      {
        path: "value",
        type: "writable",
        variableType: "text",

        valueProp: "value",
        onChangeProp: "onValueChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"change"}
        data-plasmic-override={overrides.change}
        className={classNames(projectcss.all, sty.change, {
          [sty.changenegative]: hasVariant($state, "negative", "negative")
        })}
      >
        <ArrowUpIcon
          className={classNames(projectcss.all, sty.svg___1K5Ie, {
            [sty.svgnegative___1K5IeBpiLs]: hasVariant(
              $state,
              "negative",
              "negative"
            )
          })}
          role={"img"}
        />

        <ArrowDownIcon
          className={classNames(projectcss.all, sty.svg__t2LFa, {
            [sty.svgnegative__t2LFaBpiLs]: hasVariant(
              $state,
              "negative",
              "negative"
            )
          })}
          role={"img"}
        />

        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rZw6B
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "21.4";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ),
          value: args.text3,
          className: classNames(sty.slotTargetText3, {
            [sty.slotTargetText3negative]: hasVariant(
              $state,
              "negative",
              "negative"
            )
          })
        })}
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textnegative]: hasVariant($state, "negative", "negative") }
          )}
        >
          {"%"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "change", "text"],
  change: ["change", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  change: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTrendCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTrendCard__VariantsArgs;
    args?: PlasmicTrendCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicTrendCard__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicTrendCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTrendCard__ArgProps,
          internalVariantPropNames: PlasmicTrendCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTrendCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTrendCard";
  } else {
    func.displayName = `PlasmicTrendCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTrendCard = Object.assign(
  // Top-level PlasmicTrendCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    change: makeNodeComponent("change"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicTrendCard
    internalVariantProps: PlasmicTrendCard__VariantProps,
    internalArgProps: PlasmicTrendCard__ArgProps
  }
);

export default PlasmicTrendCard;
/* prettier-ignore-end */
