/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: 9Efhz4aeRJA1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicSlideoutListItem2.module.css"; // plasmic-import: 9Efhz4aeRJA1/css

import Divider3Icon from "./icons/PlasmicIcon__Divider3"; // plasmic-import: K2tYHr-lcp8R/icon
import User02Icon from "./icons/PlasmicIcon__User02"; // plasmic-import: 2Uwgk0NcERV_/icon

createPlasmicElementProxy;

export type PlasmicSlideoutListItem2__VariantMembers = {
  disciplinaryAction: "disciplinaryAction";
  infractionType: "positive" | "negative";
};
export type PlasmicSlideoutListItem2__VariantsArgs = {
  disciplinaryAction?: SingleBooleanChoiceArg<"disciplinaryAction">;
  infractionType?: SingleChoiceArg<"positive" | "negative">;
};
type VariantPropType = keyof PlasmicSlideoutListItem2__VariantsArgs;
export const PlasmicSlideoutListItem2__VariantProps =
  new Array<VariantPropType>("disciplinaryAction", "infractionType");

export type PlasmicSlideoutListItem2__ArgsType = {
  itemName?: React.ReactNode;
  date2?: React.ReactNode;
  documentingLeader?: React.ReactNode;
  informed2?: React.ReactNode;
  pointValue2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSlideoutListItem2__ArgsType;
export const PlasmicSlideoutListItem2__ArgProps = new Array<ArgPropType>(
  "itemName",
  "date2",
  "documentingLeader",
  "informed2",
  "pointValue2"
);

export type PlasmicSlideoutListItem2__OverridesType = {
  listItem?: Flex__<"div">;
  contents?: Flex__<"div">;
  content11?: Flex__<"div">;
  listItemDetails?: Flex__<"div">;
  text24?: Flex__<"div">;
  furtherDetails?: Flex__<"div">;
  divider?: Flex__<"svg">;
  iconAndLeader?: Flex__<"div">;
  points?: Flex__<"div">;
  pointsText?: Flex__<"div">;
};

export interface DefaultSlideoutListItem2Props {
  itemName?: React.ReactNode;
  date2?: React.ReactNode;
  documentingLeader?: React.ReactNode;
  informed2?: React.ReactNode;
  pointValue2?: React.ReactNode;
  disciplinaryAction?: SingleBooleanChoiceArg<"disciplinaryAction">;
  infractionType?: SingleChoiceArg<"positive" | "negative">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSlideoutListItem2__RenderFunc(props: {
  variants: PlasmicSlideoutListItem2__VariantsArgs;
  args: PlasmicSlideoutListItem2__ArgsType;
  overrides: PlasmicSlideoutListItem2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disciplinaryAction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.disciplinaryAction
      },
      {
        path: "infractionType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.infractionType
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"listItem"}
      data-plasmic-override={overrides.listItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.listItem,
        {
          [sty.listIteminfractionType_positive]: hasVariant(
            $state,
            "infractionType",
            "positive"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"contents"}
        data-plasmic-override={overrides.contents}
        className={classNames(projectcss.all, sty.contents)}
      >
        <div
          data-plasmic-name={"content11"}
          data-plasmic-override={overrides.content11}
          className={classNames(projectcss.all, sty.content11)}
        >
          <div
            data-plasmic-name={"listItemDetails"}
            data-plasmic-override={overrides.listItemDetails}
            className={classNames(projectcss.all, sty.listItemDetails)}
          >
            <div
              data-plasmic-name={"text24"}
              data-plasmic-override={overrides.text24}
              className={classNames(projectcss.all, sty.text24)}
            >
              {renderPlasmicSlot({
                defaultContents: "Item Name",
                value: args.itemName,
                className: classNames(sty.slotTargetItemName, {
                  [sty.slotTargetItemNamedisciplinaryAction]: hasVariant(
                    $state,
                    "disciplinaryAction",
                    "disciplinaryAction"
                  )
                })
              })}
            </div>
            <div
              data-plasmic-name={"furtherDetails"}
              data-plasmic-override={overrides.furtherDetails}
              className={classNames(projectcss.all, sty.furtherDetails)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uhFn9
                    )}
                  >
                    {"10/2/2025"}
                  </div>
                ),
                value: args.date2,
                className: classNames(sty.slotTargetDate2, {
                  [sty.slotTargetDate2disciplinaryAction]: hasVariant(
                    $state,
                    "disciplinaryAction",
                    "disciplinaryAction"
                  )
                })
              })}
              <Divider3Icon
                data-plasmic-name={"divider"}
                data-plasmic-override={overrides.divider}
                className={classNames(projectcss.all, sty.divider)}
                role={"img"}
              />

              <div
                data-plasmic-name={"iconAndLeader"}
                data-plasmic-override={overrides.iconAndLeader}
                className={classNames(projectcss.all, sty.iconAndLeader)}
              >
                <User02Icon
                  className={classNames(projectcss.all, sty.svg__q77Qt)}
                  role={"img"}
                />

                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b3Ym2
                      )}
                    >
                      {"Leader Name"}
                    </div>
                  ),
                  value: args.documentingLeader,
                  className: classNames(sty.slotTargetDocumentingLeader, {
                    [sty.slotTargetDocumentingLeaderdisciplinaryAction]:
                      hasVariant(
                        $state,
                        "disciplinaryAction",
                        "disciplinaryAction"
                      )
                  })
                })}
              </div>
              <Divider3Icon
                className={classNames(projectcss.all, sty.svg__qAimV, {
                  [sty.svgdisciplinaryAction__qAimV2WMb]: hasVariant(
                    $state,
                    "disciplinaryAction",
                    "disciplinaryAction"
                  )
                })}
                role={"img"}
              />

              {(
                hasVariant($state, "disciplinaryAction", "disciplinaryAction")
                  ? false
                  : true
              )
                ? renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1ZjS8
                        )}
                      >
                        {"Informed"}
                      </div>
                    ),
                    value: args.informed2,
                    className: classNames(sty.slotTargetInformed2, {
                      [sty.slotTargetInformed2disciplinaryAction]: hasVariant(
                        $state,
                        "disciplinaryAction",
                        "disciplinaryAction"
                      )
                    })
                  })
                : null}
            </div>
          </div>
          <div
            data-plasmic-name={"points"}
            data-plasmic-override={overrides.points}
            className={classNames(projectcss.all, sty.points, {
              [sty.pointsdisciplinaryAction]: hasVariant(
                $state,
                "disciplinaryAction",
                "disciplinaryAction"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.freeBox__z3Kv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yBoHx
                    )}
                  >
                    {"10"}
                  </div>
                </div>
              ),
              value: args.pointValue2,
              className: classNames(sty.slotTargetPointValue2, {
                [sty.slotTargetPointValue2disciplinaryAction]: hasVariant(
                  $state,
                  "disciplinaryAction",
                  "disciplinaryAction"
                ),
                [sty.slotTargetPointValue2infractionType_negative]: hasVariant(
                  $state,
                  "infractionType",
                  "negative"
                ),
                [sty.slotTargetPointValue2infractionType_positive]: hasVariant(
                  $state,
                  "infractionType",
                  "positive"
                )
              })
            })}
            <div
              data-plasmic-name={"pointsText"}
              data-plasmic-override={overrides.pointsText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.pointsText
              )}
            >
              {"points"}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  listItem: [
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "furtherDetails",
    "divider",
    "iconAndLeader",
    "points",
    "pointsText"
  ],
  contents: [
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "furtherDetails",
    "divider",
    "iconAndLeader",
    "points",
    "pointsText"
  ],
  content11: [
    "content11",
    "listItemDetails",
    "text24",
    "furtherDetails",
    "divider",
    "iconAndLeader",
    "points",
    "pointsText"
  ],
  listItemDetails: [
    "listItemDetails",
    "text24",
    "furtherDetails",
    "divider",
    "iconAndLeader"
  ],
  text24: ["text24"],
  furtherDetails: ["furtherDetails", "divider", "iconAndLeader"],
  divider: ["divider"],
  iconAndLeader: ["iconAndLeader"],
  points: ["points", "pointsText"],
  pointsText: ["pointsText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  listItem: "div";
  contents: "div";
  content11: "div";
  listItemDetails: "div";
  text24: "div";
  furtherDetails: "div";
  divider: "svg";
  iconAndLeader: "div";
  points: "div";
  pointsText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlideoutListItem2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSlideoutListItem2__VariantsArgs;
    args?: PlasmicSlideoutListItem2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSlideoutListItem2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSlideoutListItem2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSlideoutListItem2__ArgProps,
          internalVariantPropNames: PlasmicSlideoutListItem2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSlideoutListItem2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "listItem") {
    func.displayName = "PlasmicSlideoutListItem2";
  } else {
    func.displayName = `PlasmicSlideoutListItem2.${nodeName}`;
  }
  return func;
}

export const PlasmicSlideoutListItem2 = Object.assign(
  // Top-level PlasmicSlideoutListItem2 renders the root element
  makeNodeComponent("listItem"),
  {
    // Helper components rendering sub-elements
    contents: makeNodeComponent("contents"),
    content11: makeNodeComponent("content11"),
    listItemDetails: makeNodeComponent("listItemDetails"),
    text24: makeNodeComponent("text24"),
    furtherDetails: makeNodeComponent("furtherDetails"),
    divider: makeNodeComponent("divider"),
    iconAndLeader: makeNodeComponent("iconAndLeader"),
    points: makeNodeComponent("points"),
    pointsText: makeNodeComponent("pointsText"),

    // Metadata about props expected for PlasmicSlideoutListItem2
    internalVariantProps: PlasmicSlideoutListItem2__VariantProps,
    internalArgProps: PlasmicSlideoutListItem2__ArgProps
  }
);

export default PlasmicSlideoutListItem2;
/* prettier-ignore-end */
