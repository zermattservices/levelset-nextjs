/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: -vnBKJaatlPo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuNavigation from "../../MenuNavigation"; // plasmic-import: eJlFBj1x_mCN/component
import DashboardSubmenu from "../../DashboardSubmenu"; // plasmic-import: DnrJ08NISsSS/component
import { DisciplineTable } from "../../CodeComponents/DisciplineTable"; // plasmic-import: Gsr7FZewgF56/codeComponent
import { DisciplineActionsTable } from "../../CodeComponents/DisciplineActionsTable"; // plasmic-import: gO99exJZ_N-6/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicDiscipline.module.css"; // plasmic-import: -vnBKJaatlPo/css

createPlasmicElementProxy;

export type PlasmicDiscipline__VariantMembers = {};
export type PlasmicDiscipline__VariantsArgs = {};
type VariantPropType = keyof PlasmicDiscipline__VariantsArgs;
export const PlasmicDiscipline__VariantProps = new Array<VariantPropType>();

export type PlasmicDiscipline__ArgsType = {};
type ArgPropType = keyof PlasmicDiscipline__ArgsType;
export const PlasmicDiscipline__ArgProps = new Array<ArgPropType>();

export type PlasmicDiscipline__OverridesType = {
  root?: Flex__<"div">;
  menuNavigation?: Flex__<typeof MenuNavigation>;
  verticalStack?: Flex__<"div">;
  disciplineTable?: Flex__<typeof DisciplineTable>;
  verticalStack2?: Flex__<"div">;
  disciplineActionsTable?: Flex__<typeof DisciplineActionsTable>;
};

export interface DefaultDisciplineProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDiscipline__RenderFunc(props: {
  variants: PlasmicDiscipline__VariantsArgs;
  args: PlasmicDiscipline__ArgsType;
  overrides: PlasmicDiscipline__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuNavigation.locationName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Buda FSU"
      },
      {
        path: "menuNavigation.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.first_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.userRole",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.role;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.last_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicDiscipline.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDiscipline.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDiscipline.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <MenuNavigation
          data-plasmic-name={"menuNavigation"}
          data-plasmic-override={overrides.menuNavigation}
          className={classNames("__wab_instance", sty.menuNavigation)}
          firstName={generateStateValueProp($state, [
            "menuNavigation",
            "firstName"
          ])}
          lastName={generateStateValueProp($state, [
            "menuNavigation",
            "lastName"
          ])}
          locationName={generateStateValueProp($state, [
            "menuNavigation",
            "locationName"
          ])}
          onFirstNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "firstName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLastNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "lastName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLocationNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "locationName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onUserRoleChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "userRole"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          userRole={generateStateValueProp($state, [
            "menuNavigation",
            "userRole"
          ])}
        />

        <div className={classNames(projectcss.all, sty.freeBox__jtUkZ)}>
          <div className={classNames(projectcss.all, sty.freeBox__ureDb)}>
            <div className={classNames(projectcss.all, sty.freeBox__nlSty)}>
              <div className={classNames(projectcss.all, sty.freeBox__mKhGx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wQDeC
                  )}
                >
                  {"APS Dashboard"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__c457R)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8HOob
                  )}
                >
                  {
                    "Here\u2019s your organization's current points. Click a Team Member to see their recent infractions."
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__lKzxl)}>
          <div className={classNames(projectcss.all, sty.freeBox__cHwGk)}>
            <div
              data-plasmic-name={"verticalStack"}
              data-plasmic-override={overrides.verticalStack}
              className={classNames(projectcss.all, sty.verticalStack)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__of8Zu
                )}
              >
                {"Employees"}
              </div>
              <DisciplineTable
                data-plasmic-name={"disciplineTable"}
                data-plasmic-override={overrides.disciplineTable}
                className={classNames("__wab_instance", sty.disciplineTable)}
                density={"comfortable"}
                locationId={"67e00fb2-29f5-41ce-9c1c-93e2f7f392dd"}
                orgId={"54b9864f-9df9-4a15-a209-7b99e1c274f4"}
                showActions={true}
              />
            </div>
            <div
              data-plasmic-name={"verticalStack2"}
              data-plasmic-override={overrides.verticalStack2}
              className={classNames(projectcss.all, sty.verticalStack2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oSxFd
                )}
              >
                {"Disciplinary Actions"}
              </div>
              <DisciplineActionsTable
                data-plasmic-name={"disciplineActionsTable"}
                data-plasmic-override={overrides.disciplineActionsTable}
                className={classNames(
                  "__wab_instance",
                  sty.disciplineActionsTable
                )}
                density={"comfortable"}
                locationId={"67e00fb2-29f5-41ce-9c1c-93e2f7f392dd"}
                orgId={"54b9864f-9df9-4a15-a209-7b99e1c274f4"}
                showActions={false}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menuNavigation",
    "verticalStack",
    "disciplineTable",
    "verticalStack2",
    "disciplineActionsTable"
  ],
  menuNavigation: ["menuNavigation"],
  verticalStack: ["verticalStack", "disciplineTable"],
  disciplineTable: ["disciplineTable"],
  verticalStack2: ["verticalStack2", "disciplineActionsTable"],
  disciplineActionsTable: ["disciplineActionsTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuNavigation: typeof MenuNavigation;
  verticalStack: "div";
  disciplineTable: typeof DisciplineTable;
  verticalStack2: "div";
  disciplineActionsTable: typeof DisciplineActionsTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDiscipline__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDiscipline__VariantsArgs;
    args?: PlasmicDiscipline__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicDiscipline__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicDiscipline__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDiscipline__ArgProps,
          internalVariantPropNames: PlasmicDiscipline__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDiscipline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDiscipline";
  } else {
    func.displayName = `PlasmicDiscipline.${nodeName}`;
  }
  return func;
}

export const PlasmicDiscipline = Object.assign(
  // Top-level PlasmicDiscipline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuNavigation: makeNodeComponent("menuNavigation"),
    verticalStack: makeNodeComponent("verticalStack"),
    disciplineTable: makeNodeComponent("disciplineTable"),
    verticalStack2: makeNodeComponent("verticalStack2"),
    disciplineActionsTable: makeNodeComponent("disciplineActionsTable"),

    // Metadata about props expected for PlasmicDiscipline
    internalVariantProps: PlasmicDiscipline__VariantProps,
    internalArgProps: PlasmicDiscipline__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Levelset.io",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDiscipline;
/* prettier-ignore-end */
