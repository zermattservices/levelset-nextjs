/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: -vnBKJaatlPo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MenuNavigation from "../../MenuNavigation"; // plasmic-import: eJlFBj1x_mCN/component
import DashboardSubmenu from "../../DashboardSubmenu"; // plasmic-import: DnrJ08NISsSS/component
import { RedirectIf } from "../../CodeComponents/RedirectIf"; // plasmic-import: gEWHFHS2fu7I/codeComponent
import { DisciplineTable } from "../../CodeComponents/DisciplineTable"; // plasmic-import: Gsr7FZewgF56/codeComponent
import { DisciplineActionsTable } from "../../CodeComponents/DisciplineActionsTable"; // plasmic-import: gO99exJZ_N-6/codeComponent
import { DrawerV2 } from "../../CodeComponents/DrawerV2"; // plasmic-import: lBRE4GzKIedo/codeComponent
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import LevelsetButton from "../../LevelsetButton"; // plasmic-import: u704oB_4BUvT/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import SlideoutListItem2 from "../../SlideoutListItem2"; // plasmic-import: 9Efhz4aeRJA1/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicDiscipline.module.css"; // plasmic-import: -vnBKJaatlPo/css

import CheckSvgIcon from "../levelset_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: dTo8s4EZdHvA/icon
import IconIcon from "../levelset_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: CEbmjO_n9jaW/icon
import SquarePlusIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__SquarePlus"; // plasmic-import: A4Dw-GYBFNP-/icon

createPlasmicElementProxy;

export type PlasmicDiscipline__VariantMembers = {};
export type PlasmicDiscipline__VariantsArgs = {};
type VariantPropType = keyof PlasmicDiscipline__VariantsArgs;
export const PlasmicDiscipline__VariantProps = new Array<VariantPropType>();

export type PlasmicDiscipline__ArgsType = {
  itemName?: React.ReactNode;
  pointValue3?: React.ReactNode;
  itemName2?: React.ReactNode;
  pointValue5?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDiscipline__ArgsType;
export const PlasmicDiscipline__ArgProps = new Array<ArgPropType>(
  "itemName",
  "pointValue3",
  "itemName2",
  "pointValue5"
);

export type PlasmicDiscipline__OverridesType = {
  root?: Flex__<"div">;
  menuNavigation?: Flex__<typeof MenuNavigation>;
  redirectIf?: Flex__<typeof RedirectIf>;
  verticalStack?: Flex__<"div">;
  disciplineTable?: Flex__<typeof DisciplineTable>;
  verticalStack2?: Flex__<"div">;
  disciplineActionsTable?: Flex__<typeof DisciplineActionsTable>;
  drawerV2?: Flex__<typeof DrawerV2>;
  content2?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  textAndOnlineIndicator?: Flex__<"div">;
  text2?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  panel?: Flex__<"div">;
  header?: Flex__<"div">;
  container?: Flex__<"div">;
  statistics?: Flex__<"div">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  pathwayContent?: Flex__<typeof TabContent>;
  peContent?: Flex__<typeof TabContent>;
  evalsContent?: Flex__<typeof TabContent>;
  disciplineContent?: Flex__<typeof TabContent>;
  discipline?: Flex__<"div">;
  row?: Flex__<"div">;
  text13?: Flex__<"div">;
  row2?: Flex__<"div">;
  metricItem?: Flex__<"div">;
  headingAndNumber?: Flex__<"div">;
  heading?: Flex__<"div">;
  numberAndBadge?: Flex__<"div">;
  number?: Flex__<"div">;
  metricItem2?: Flex__<"div">;
  headingAndNumber2?: Flex__<"div">;
  heading2?: Flex__<"div">;
  numberAndBadge2?: Flex__<"div">;
  number2?: Flex__<"div">;
  inputAndText?: Flex__<"div">;
  iconAndText?: Flex__<"div">;
  text14?: Flex__<"div">;
  frame1?: Flex__<"div">;
  date4?: Flex__<"div">;
  leader4?: Flex__<"div">;
  informed4?: Flex__<"div">;
  pointValue8?: Flex__<"div">;
  listItem?: Flex__<"div">;
  contents?: Flex__<"div">;
  content11?: Flex__<"div">;
  listItemDetails?: Flex__<"div">;
  text24?: Flex__<"div">;
  points?: Flex__<"div">;
  pointsText?: Flex__<"div">;
  inputAndText2?: Flex__<"div">;
  iconAndText2?: Flex__<"div">;
  text27?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  select?: Flex__<typeof AntdSelect>;
  timePicker?: Flex__<typeof AntdDatePicker>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  input9?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
  svg?: Flex__<"svg">;
  frame6?: Flex__<"div">;
  leader2?: Flex__<"div">;
  date2?: Flex__<"div">;
  listItem2?: Flex__<"div">;
  contents2?: Flex__<"div">;
  content12?: Flex__<"div">;
  listItemDetails2?: Flex__<"div">;
  text25?: Flex__<"div">;
  points2?: Flex__<"div">;
  pointsText2?: Flex__<"div">;
};

export interface DefaultDisciplineProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDiscipline__RenderFunc(props: {
  variants: PlasmicDiscipline__VariantsArgs;
  args: PlasmicDiscipline__ArgsType;
  overrides: PlasmicDiscipline__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerV2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedEmployee",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "initialProfileTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "tab4"
      },
      {
        path: "menuNavigation.locationName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.first_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.userRole",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.role;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.last_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    infractionsQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "da7f410d-9ebd-4d9b-a1dd-36c551524fd5",
        userArgs: {
          filters: [$state.selectedEmployee?.id]
        },
        cacheKey: `plasmic.$.da7f410d-9ebd-4d9b-a1dd-36c551524fd5.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    discActions: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "65e45fcb-fda5-4165-aef9-aed4c21434bd",
        userArgs: {
          filters: [$state.selectedEmployee?.id]
        },
        cacheKey: `plasmic.$.65e45fcb-fda5-4165-aef9-aed4c21434bd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    discActionsRubric: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "16d21f59-38ef-44d0-868d-b5a0c1746cfa",
        userArgs: {},
        cacheKey: `plasmic.$.16d21f59-38ef-44d0-868d-b5a0c1746cfa.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    employeesDiscQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "c3bd2802-6689-478d-a8a6-846360d08597",
        userArgs: {
          filters: ["f69c9488-5636-4591-9e6a-10967db6075e"]
        },
        cacheKey: `plasmic.$.c3bd2802-6689-478d-a8a6-846360d08597.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    directorsQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "9fa90f8d-dff1-43d3-a2db-4a18759d94d6",
        userArgs: {},
        cacheKey: `plasmic.$.9fa90f8d-dff1-43d3-a2db-4a18759d94d6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    activeAppUser: usePlasmicDataOp(() => {
      return {
        sourceId: "wGi39M1g3x2KnbXK4J4Gyq",
        opId: "529cafaf-e958-44f9-9b3c-02174ee46a9d",
        userArgs: {
          filters: [$ctx.auth.id]
        },
        cacheKey: `plasmic.$.529cafaf-e958-44f9-9b3c-02174ee46a9d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicDiscipline.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDiscipline.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDiscipline.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <MenuNavigation
          data-plasmic-name={"menuNavigation"}
          data-plasmic-override={overrides.menuNavigation}
          className={classNames("__wab_instance", sty.menuNavigation)}
          firstName={generateStateValueProp($state, [
            "menuNavigation",
            "firstName"
          ])}
          lastName={generateStateValueProp($state, [
            "menuNavigation",
            "lastName"
          ])}
          locationName={generateStateValueProp($state, [
            "menuNavigation",
            "locationName"
          ])}
          onFirstNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "firstName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLastNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "lastName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLocationNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "locationName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onUserRoleChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "userRole"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          userRole={generateStateValueProp($state, [
            "menuNavigation",
            "userRole"
          ])}
        />

        <RedirectIf
          data-plasmic-name={"redirectIf"}
          data-plasmic-override={overrides.redirectIf}
          className={classNames("__wab_instance", sty.redirectIf)}
          condition={true}
          onFalse={async () => {
            const $steps = {};

            $steps["goToLoginPage"] = true
              ? (() => {
                  const actionArgs = { destination: `/auth/login` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToLoginPage"] != null &&
              typeof $steps["goToLoginPage"] === "object" &&
              typeof $steps["goToLoginPage"].then === "function"
            ) {
              $steps["goToLoginPage"] = await $steps["goToLoginPage"];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jtUkZ)}>
            <div className={classNames(projectcss.all, sty.freeBox__ureDb)}>
              <div className={classNames(projectcss.all, sty.freeBox__nlSty)}>
                <div className={classNames(projectcss.all, sty.freeBox__mKhGx)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wQDeC
                    )}
                  >
                    {"APS Dashboard"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__c457R)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8HOob
                    )}
                  >
                    {
                      "Here\u2019s your organization's current points. Click a Team Member to see their recent infractions."
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__suZia
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.auth.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Here\u2019s your organization's current points. Click a Team Member to see their recent infractions.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__lKzxl)}>
            <div className={classNames(projectcss.all, sty.freeBox__cHwGk)}>
              <div
                data-plasmic-name={"verticalStack"}
                data-plasmic-override={overrides.verticalStack}
                className={classNames(projectcss.all, sty.verticalStack)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__of8Zu
                  )}
                >
                  {"Employees"}
                </div>
                <DisciplineTable
                  data-plasmic-name={"disciplineTable"}
                  data-plasmic-override={overrides.disciplineTable}
                  className={classNames("__wab_instance", sty.disciplineTable)}
                  density={"comfortable"}
                  locationId={"67e00fb2-29f5-41ce-9c1c-93e2f7f392dd"}
                  onRowClick={async employee => {
                    const $steps = {};

                    $steps["updateSelectedEmployee"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedEmployee"]
                            },
                            operation: 0,
                            value: employee
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedEmployee"] != null &&
                      typeof $steps["updateSelectedEmployee"] === "object" &&
                      typeof $steps["updateSelectedEmployee"].then ===
                        "function"
                    ) {
                      $steps["updateSelectedEmployee"] =
                        await $steps["updateSelectedEmployee"];
                    }

                    $steps["updateDrawerV2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawerV2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerV2Open"] != null &&
                      typeof $steps["updateDrawerV2Open"] === "object" &&
                      typeof $steps["updateDrawerV2Open"].then === "function"
                    ) {
                      $steps["updateDrawerV2Open"] =
                        await $steps["updateDrawerV2Open"];
                    }
                  }}
                  orgId={"54b9864f-9df9-4a15-a209-7b99e1c274f4"}
                  showActions={true}
                />
              </div>
              <div
                data-plasmic-name={"verticalStack2"}
                data-plasmic-override={overrides.verticalStack2}
                className={classNames(projectcss.all, sty.verticalStack2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oSxFd
                  )}
                >
                  {"Disciplinary Actions"}
                </div>
                <DisciplineActionsTable
                  data-plasmic-name={"disciplineActionsTable"}
                  data-plasmic-override={overrides.disciplineActionsTable}
                  className={classNames(
                    "__wab_instance",
                    sty.disciplineActionsTable
                  )}
                  density={"comfortable"}
                  locationId={"67e00fb2-29f5-41ce-9c1c-93e2f7f392dd"}
                  orgId={"54b9864f-9df9-4a15-a209-7b99e1c274f4"}
                  showActions={false}
                />
              </div>
            </div>
          </div>
          <DrawerV2
            data-plasmic-name={"drawerV2"}
            data-plasmic-override={overrides.drawerV2}
            className={classNames("__wab_instance", sty.drawerV2)}
            closable={true}
            closeButtonClassName={classNames({
              [sty["pcls_1P0T8Swx7ssW"]]: true
            })}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            drawerBodyClassName={classNames({
              [sty["pcls_0s1oo6MW753L"]]: true
            })}
            drawerContentWrapperClassName={classNames({
              [sty["pcls_NIsXGOi-WC36"]]: true
            })}
            drawerScopeClassName={sty["drawerV2__drawer"]}
            keyboard={false}
            mask={false}
            maskClosable={false}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["drawerV2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["drawerV2", "open"])}
            size={"default"}
            title={
              <div
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                className={classNames(projectcss.all, sty.content2)}
              >
                <div
                  data-plasmic-name={"textAndSupportingText2"}
                  data-plasmic-override={overrides.textAndSupportingText2}
                  className={classNames(
                    projectcss.all,
                    sty.textAndSupportingText2
                  )}
                >
                  <div
                    data-plasmic-name={"textAndOnlineIndicator"}
                    data-plasmic-override={overrides.textAndOnlineIndicator}
                    className={classNames(
                      projectcss.all,
                      sty.textAndOnlineIndicator
                    )}
                  >
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              {
                                {
                                  return $state.selectedEmployee?.full_name;
                                }
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Reece Howard";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"supportingText2"}
                    data-plasmic-override={overrides.supportingText2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.supportingText2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.selectedEmployee?.role;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Owner/Operator";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            }
            width={"620"}
          >
            <div
              data-plasmic-name={"panel"}
              data-plasmic-override={overrides.panel}
              className={classNames(projectcss.all, sty.panel)}
            >
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <div
                  data-plasmic-name={"container"}
                  data-plasmic-override={overrides.container}
                  className={classNames(projectcss.all, sty.container)}
                >
                  <div
                    data-plasmic-name={"statistics"}
                    data-plasmic-override={overrides.statistics}
                    className={classNames(projectcss.all, sty.statistics)}
                  >
                    <TabsContainer
                      data-plasmic-name={"tabsContainer"}
                      data-plasmic-override={overrides.tabsContainer}
                      initialKey={(() => {
                        try {
                          return $state.initialProfileTab;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      mountMode={"mountAllEagerly"}
                      previewAll={false}
                      previewKey={"tab4"}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___2R2C
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eLzb
                              )}
                            >
                              <TabButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__aqaGl
                                )}
                                tabKey={"tab1"}
                              >
                                <LevelsetButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.levelsetButton__q81U
                                  )}
                                  color={(() => {
                                    try {
                                      return $ctx.currentTabKey === "tab1"
                                        ? "green"
                                        : "softSand";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "green";
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___6KyZb
                                    )}
                                  >
                                    {"Pathway"}
                                  </div>
                                </LevelsetButton>
                              </TabButton>
                              <TabButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__hM9Qt
                                )}
                                tabKey={"tab2"}
                              >
                                <LevelsetButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.levelsetButton__nUeV4
                                  )}
                                  color={(() => {
                                    try {
                                      return $ctx.currentTabKey === "tab2"
                                        ? "green"
                                        : "softSand";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "green";
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__l7T
                                    )}
                                  >
                                    {"Positional Excellence"}
                                  </div>
                                </LevelsetButton>
                              </TabButton>
                              <TabButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__mfDk
                                )}
                                tabKey={"tab3"}
                              >
                                <LevelsetButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.levelsetButton__rd97
                                  )}
                                  color={(() => {
                                    try {
                                      return $ctx.currentTabKey === "tab3"
                                        ? "green"
                                        : "softSand";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "green";
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4BkwJ
                                    )}
                                  >
                                    {"Evaluations"}
                                  </div>
                                </LevelsetButton>
                              </TabButton>
                              <TabButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__myaYm
                                )}
                                tabKey={"tab4"}
                              >
                                <LevelsetButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.levelsetButton__twGtL
                                  )}
                                  color={(() => {
                                    try {
                                      return $ctx.currentTabKey === "tab4"
                                        ? "green"
                                        : "softSand";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "green";
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rnFqb
                                    )}
                                  >
                                    {"Discipline"}
                                  </div>
                                </LevelsetButton>
                              </TabButton>
                              <TabUnderline
                                data-plasmic-name={"tabUnderline"}
                                data-plasmic-override={overrides.tabUnderline}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabUnderline
                                )}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aRoag
                              )}
                            >
                              <TabContent
                                data-plasmic-name={"pathwayContent"}
                                data-plasmic-override={overrides.pathwayContent}
                                className={classNames(
                                  "__wab_instance",
                                  sty.pathwayContent
                                )}
                                tabKey={"tab1"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__eNnS6
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__o774
                                    )}
                                  >
                                    {"Coming soon!"}
                                  </div>
                                </div>
                              </TabContent>
                              <TabContent
                                data-plasmic-name={"peContent"}
                                data-plasmic-override={overrides.peContent}
                                className={classNames(
                                  "__wab_instance",
                                  sty.peContent
                                )}
                                tabKey={"tab2"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gmIt2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ts6AM
                                    )}
                                  >
                                    {"Coming soon!"}
                                  </div>
                                </div>
                              </TabContent>
                              <TabContent
                                data-plasmic-name={"evalsContent"}
                                data-plasmic-override={overrides.evalsContent}
                                className={classNames(
                                  "__wab_instance",
                                  sty.evalsContent
                                )}
                                tabKey={"tab3"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wMoxn
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jrDLj
                                    )}
                                  >
                                    {"Coming soon!"}
                                  </div>
                                </div>
                              </TabContent>
                              <TabContent
                                data-plasmic-name={"disciplineContent"}
                                data-plasmic-override={
                                  overrides.disciplineContent
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.disciplineContent
                                )}
                                tabKey={"tab4"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__imotp
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"discipline"}
                                    data-plasmic-override={overrides.discipline}
                                    className={classNames(
                                      projectcss.all,
                                      sty.discipline
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"row"}
                                      data-plasmic-override={overrides.row}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"text13"}
                                        data-plasmic-override={overrides.text13}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text13
                                        )}
                                      >
                                        {"Current Period (last 90 days)"}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"row2"}
                                      data-plasmic-override={overrides.row2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"metricItem"}
                                        data-plasmic-override={
                                          overrides.metricItem
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.metricItem
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"headingAndNumber"}
                                          data-plasmic-override={
                                            overrides.headingAndNumber
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.headingAndNumber
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"heading"}
                                            data-plasmic-override={
                                              overrides.heading
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.heading
                                            )}
                                          >
                                            {"Infractions"}
                                          </div>
                                          <div
                                            data-plasmic-name={"numberAndBadge"}
                                            data-plasmic-override={
                                              overrides.numberAndBadge
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.numberAndBadge
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"number"}
                                              data-plasmic-override={
                                                overrides.number
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.number
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $queries.infractionsQuery
                                                        .data ?? []
                                                    ).reduce(
                                                      total => total + 1,
                                                      0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "4";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        data-plasmic-name={"metricItem2"}
                                        data-plasmic-override={
                                          overrides.metricItem2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.metricItem2
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={
                                            "headingAndNumber2"
                                          }
                                          data-plasmic-override={
                                            overrides.headingAndNumber2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.headingAndNumber2
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"heading2"}
                                            data-plasmic-override={
                                              overrides.heading2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.heading2
                                            )}
                                          >
                                            {"Discipline Points"}
                                          </div>
                                          <div
                                            data-plasmic-name={
                                              "numberAndBadge2"
                                            }
                                            data-plasmic-override={
                                              overrides.numberAndBadge2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.numberAndBadge2
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"number2"}
                                              data-plasmic-override={
                                                overrides.number2
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.number2
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $queries.infractionsQuery
                                                        .data ?? []
                                                    ).reduce(
                                                      (total, i) =>
                                                        total + (i.points ?? 0),
                                                      0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "55";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__jzVpm
                                      )}
                                    />

                                    <div
                                      data-plasmic-name={"inputAndText"}
                                      data-plasmic-override={
                                        overrides.inputAndText
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.inputAndText
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"iconAndText"}
                                        data-plasmic-override={
                                          overrides.iconAndText
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.iconAndText
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"text14"}
                                          data-plasmic-override={
                                            overrides.text14
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text14
                                          )}
                                        >
                                          {"Infractions"}
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"frame1"}
                                      data-plasmic-override={overrides.frame1}
                                      className={classNames(
                                        projectcss.all,
                                        sty.frame1
                                      )}
                                    >
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                        (() => {
                                          try {
                                            return $queries.infractionsQuery
                                              .data;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const infraction = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <SlideoutListItem2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.slideoutListItem2__kgkig
                                              )}
                                              date2={
                                                <div
                                                  data-plasmic-name={"date4"}
                                                  data-plasmic-override={
                                                    overrides.date4
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.date4
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return infraction.infraction_date;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "10/2/2025";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              }
                                              documentingLeader={
                                                <div
                                                  data-plasmic-name={"leader4"}
                                                  data-plasmic-override={
                                                    overrides.leader4
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.leader4
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return infraction.leader_name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Leader Name";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              }
                                              informed2={
                                                <div
                                                  data-plasmic-name={
                                                    "informed4"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.informed4
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.informed4
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return infraction.acknowledgement;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Informed";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              }
                                              infractionType={(() => {
                                                try {
                                                  return infraction.points > 0
                                                    ? "negative"
                                                    : "positive";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "negative";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              itemName={
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return infraction.infraction;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Item Name";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              }
                                              key={currentIndex}
                                              pointValue2={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__birHi
                                                  )}
                                                >
                                                  <div
                                                    data-plasmic-name={
                                                      "pointValue8"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.pointValue8
                                                    }
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.pointValue8
                                                    )}
                                                  >
                                                    <React.Fragment>
                                                      {(() => {
                                                        try {
                                                          return infraction.points;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return "10";
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    </React.Fragment>
                                                  </div>
                                                </div>
                                              }
                                            />
                                          );
                                        }
                                      )}
                                      {(() => {
                                        try {
                                          return (
                                            (
                                              $queries.infractionsQuery.data ??
                                              []
                                            ).length === 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"listItem"}
                                          data-plasmic-override={
                                            overrides.listItem
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.listItem
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"contents"}
                                            data-plasmic-override={
                                              overrides.contents
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.contents
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"content11"}
                                              data-plasmic-override={
                                                overrides.content11
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.content11
                                              )}
                                            >
                                              <div
                                                data-plasmic-name={
                                                  "listItemDetails"
                                                }
                                                data-plasmic-override={
                                                  overrides.listItemDetails
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.listItemDetails
                                                )}
                                              >
                                                <div
                                                  data-plasmic-name={"text24"}
                                                  data-plasmic-override={
                                                    overrides.text24
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.text24
                                                  )}
                                                >
                                                  {renderPlasmicSlot({
                                                    defaultContents:
                                                      "No infractions in the last 90 days",
                                                    value: args.itemName,
                                                    className: classNames(
                                                      sty.slotTargetItemName
                                                    )
                                                  })}
                                                </div>
                                              </div>
                                              <div
                                                data-plasmic-name={"points"}
                                                data-plasmic-override={
                                                  overrides.points
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.points
                                                )}
                                              >
                                                {renderPlasmicSlot({
                                                  defaultContents: (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__auyOl
                                                      )}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__aKcB
                                                        )}
                                                      >
                                                        {"10"}
                                                      </div>
                                                    </div>
                                                  ),
                                                  value: args.pointValue3,
                                                  className: classNames(
                                                    sty.slotTargetPointValue3
                                                  )
                                                })}
                                                <div
                                                  data-plasmic-name={
                                                    "pointsText"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.pointsText
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.pointsText
                                                  )}
                                                >
                                                  {"points"}
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wP2M3
                                      )}
                                    />

                                    <div
                                      data-plasmic-name={"inputAndText2"}
                                      data-plasmic-override={
                                        overrides.inputAndText2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.inputAndText2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"iconAndText2"}
                                        data-plasmic-override={
                                          overrides.iconAndText2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.iconAndText2
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"text27"}
                                          data-plasmic-override={
                                            overrides.text27
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text27
                                          )}
                                        >
                                          {"Disciplinary Actions"}
                                        </div>
                                        <AntdModal
                                          data-plasmic-name={"modal"}
                                          data-plasmic-override={
                                            overrides.modal
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.modal
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames
                                          )}
                                          hideFooter={true}
                                          modalContentClassName={classNames({
                                            [sty["pcls_PZU42Hw5ycxZ"]]: true
                                          })}
                                          modalScopeClassName={
                                            sty["modal__modal"]
                                          }
                                          onOpenChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "modal",
                                              "open"
                                            ]).apply(null, eventArgs);
                                          }}
                                          open={generateStateValueProp($state, [
                                            "modal",
                                            "open"
                                          ])}
                                          title={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__rv9Sl
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___2JUNz
                                                )}
                                              >
                                                {
                                                  "Record a Disciplinary Action for "
                                                }
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__wcrdm
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return $state
                                                        .selectedEmployee
                                                        ?.full_name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Test Employee";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                          }
                                          trigger={
                                            <LevelsetButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.levelsetButton__l9Kf6
                                              )}
                                              color={"red"}
                                              size={"compact"}
                                              startIcon={
                                                <SquarePlusIcon
                                                  data-plasmic-name={"svg"}
                                                  data-plasmic-override={
                                                    overrides.svg
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__tvJBe
                                                )}
                                              >
                                                {"Record an Action"}
                                              </div>
                                            </LevelsetButton>
                                          }
                                          wrapClassName={classNames({
                                            [sty["pcls_WDsFMgDP4sp7"]]: true
                                          })}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              className: classNames(
                                                "__wab_instance",
                                                sty.form
                                              ),
                                              extendedOnValuesChange: async (
                                                ...eventArgs: any
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  ["form", "value"],
                                                  FormWrapper_Helpers
                                                ).apply(null, eventArgs);
                                              },
                                              formItems: [
                                                {
                                                  label: "Name",
                                                  name: "name",
                                                  inputType: "Text"
                                                },
                                                {
                                                  label: "Message",
                                                  name: "message",
                                                  inputType: "Text Area"
                                                }
                                              ],
                                              labelCol: {
                                                span: 8,
                                                horizontalOnly: true
                                              },
                                              layout: "vertical",
                                              mode: "advanced",
                                              onFinish: async values => {
                                                const $steps = {};

                                                $steps["defaultSubmit"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "wGi39M1g3x2KnbXK4J4Gyq",
                                                          opId: "a42b00c6-9c2e-4f56-8ae6-2ee207f3f05a",
                                                          userArgs: {
                                                            variables: [
                                                              $queries
                                                                .activeAppUser
                                                                .data[0].id,

                                                              $queries
                                                                .employeesDiscQuery
                                                                .data[0].id,

                                                              $queries
                                                                .employeesDiscQuery
                                                                .data[0]
                                                                .location_id,

                                                              $queries
                                                                .employeesDiscQuery
                                                                .data[0].org_id,

                                                              $state.form.value
                                                                .action_id,

                                                              $state.form.value
                                                                .action_date
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: [
                                                            "plasmic_refresh_all"
                                                          ],
                                                          roleId: null
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["defaultSubmit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "defaultSubmit"
                                                  ] === "object" &&
                                                  typeof $steps["defaultSubmit"]
                                                    .then === "function"
                                                ) {
                                                  $steps["defaultSubmit"] =
                                                    await $steps[
                                                      "defaultSubmit"
                                                    ];
                                                }

                                                $steps["updateModalOpen"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "modal",
                                                            "open"
                                                          ]
                                                        },
                                                        operation: 4
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        const oldValue =
                                                          $stateGet(
                                                            objRoot,
                                                            variablePath
                                                          );
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          !oldValue
                                                        );
                                                        return !oldValue;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateModalOpen"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateModalOpen"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateModalOpen"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateModalOpen"] =
                                                    await $steps[
                                                      "updateModalOpen"
                                                    ];
                                                }
                                              },
                                              onFinishFailed: async data => {
                                                const $steps = {};

                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "error",
                                                            "Form Error",
                                                            "We were unable to record your inputs at this time. Please try again later",
                                                            undefined,
                                                            "bottom"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                              },
                                              onIsSubmittingChange: async (
                                                ...eventArgs: any
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "isSubmitting",
                                                  ["form", "isSubmitting"],
                                                  FormWrapper_Helpers
                                                ).apply(null, eventArgs);
                                              },
                                              ref: ref => {
                                                $refs["form"] = ref;
                                              },
                                              submitSlot: null,
                                              wrapperCol: {
                                                span: 16,
                                                horizontalOnly: true
                                              }
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName: "form.value"
                                                },
                                                {
                                                  name: "isSubmitting",
                                                  plasmicStateName:
                                                    "form.isSubmitting"
                                                }
                                              ],
                                              [],
                                              FormWrapper_Helpers ?? {},
                                              child$Props
                                            );

                                            return (
                                              <FormWrapper
                                                data-plasmic-name={"form"}
                                                data-plasmic-override={
                                                  overrides.form
                                                }
                                                {...child$Props}
                                              >
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__hzlcu
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={"id"}
                                                  name={"id"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__plrx5
                                                  )}
                                                  initialValue={undefined}
                                                  label={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__yaLw
                                                      )}
                                                    >
                                                      {
                                                        "Select the action taken"
                                                      }
                                                    </div>
                                                  }
                                                  name={"action_id"}
                                                  rules={[
                                                    {
                                                      ruleType: "required",
                                                      message:
                                                        "Please select an action"
                                                    }
                                                  ]}
                                                  valuePropName={"action_id"}
                                                >
                                                  <AntdSelect
                                                    data-plasmic-name={"select"}
                                                    data-plasmic-override={
                                                      overrides.select
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.select
                                                    )}
                                                    defaultOpen={false}
                                                    defaultStylesClassName={classNames(
                                                      projectcss.root_reset,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      styleTokensClassNames
                                                    )}
                                                    onChange={async (
                                                      ...eventArgs: any
                                                    ) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        ["select", "value"]
                                                      ).apply(null, eventArgs);
                                                    }}
                                                    options={(() => {
                                                      const __composite = [
                                                        {
                                                          type: null,
                                                          label: null,
                                                          value: null
                                                        },
                                                        {
                                                          type: null,
                                                          label: null,
                                                          value: null
                                                        },
                                                        {
                                                          type: "option",
                                                          label: null,
                                                          value: null
                                                        },
                                                        {
                                                          type: "option",
                                                          label: null,
                                                          value: null
                                                        }
                                                      ];
                                                      __composite["0"]["type"] =
                                                        "option";
                                                      __composite["0"][
                                                        "label"
                                                      ] =
                                                        $queries.discActionsRubric.data[0].action;
                                                      __composite["0"][
                                                        "value"
                                                      ] =
                                                        $queries.discActionsRubric.data[0].id;
                                                      __composite["1"]["type"] =
                                                        "option";
                                                      __composite["1"][
                                                        "label"
                                                      ] =
                                                        $queries.discActionsRubric.data[1].action;
                                                      __composite["1"][
                                                        "value"
                                                      ] =
                                                        $queries.discActionsRubric.data[1].id;
                                                      __composite["2"][
                                                        "label"
                                                      ] =
                                                        $queries.discActionsRubric.data[2].action;
                                                      __composite["2"][
                                                        "value"
                                                      ] =
                                                        $queries.discActionsRubric.data[2].id;
                                                      __composite["3"][
                                                        "label"
                                                      ] =
                                                        $queries.discActionsRubric.data[3].action;
                                                      __composite["3"][
                                                        "value"
                                                      ] =
                                                        $queries.discActionsRubric.data[3].id;
                                                      return __composite;
                                                    })()}
                                                    placeholder={"Select..."}
                                                    popupScopeClassName={
                                                      sty["select__popup"]
                                                    }
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["select", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__y3Zbo
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return $state.form.value
                                                          .action_id;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__eGh6
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return $state.form.value
                                                          .action_date;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__ulkJg
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return $queries
                                                          .activeAppUser.data[0]
                                                          .id;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__rSlJ
                                                  )}
                                                  initialValue={undefined}
                                                  label={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___8Lr1T
                                                      )}
                                                    >
                                                      {
                                                        "Date the action was taken"
                                                      }
                                                    </div>
                                                  }
                                                  name={"action_date"}
                                                  rules={[
                                                    {
                                                      ruleType: "required",
                                                      message:
                                                        "Please select a date"
                                                    }
                                                  ]}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.timePicker
                                                      ),
                                                      disabled: false,
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "timePicker",
                                                            "value"
                                                          ],
                                                          AntdDatePicker_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      popupScopeClassName:
                                                        sty[
                                                          "timePicker__datePickerPopup"
                                                        ],
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "timePicker",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "timePicker.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdDatePicker_Helpers ??
                                                        {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdDatePicker
                                                        data-plasmic-name={
                                                          "timePicker"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.timePicker
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField___3CkKw
                                                  )}
                                                  hidden={true}
                                                  initialValue={(() => {
                                                    try {
                                                      return $queries
                                                        .employeesDiscQuery
                                                        .data[0].location_id;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__bxlc3
                                                      )}
                                                    >
                                                      {"location_id"}
                                                    </div>
                                                  }
                                                  name={"location_id"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input2
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input2", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input2", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input2.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input2"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input2
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField___6Kjrs
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__q5YkF
                                                      )}
                                                    >
                                                      {"leader_name"}
                                                    </div>
                                                  }
                                                  name={"leader_name"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input3
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input3", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input3", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input3.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input3"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input3
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__bFoUl
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={"created_at"}
                                                  name={"created_at"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input4
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input4", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input4", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input4.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input4"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input4
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__gfSku
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={"employee_name"}
                                                  name={"employee_name"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input5
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input5", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input5", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input5.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input5"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input5
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__cTGx
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={"action"}
                                                  name={"action"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input6
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input6", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input6", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input6.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input6"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input6
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__f0YPd
                                                  )}
                                                  hidden={true}
                                                  initialValue={(() => {
                                                    try {
                                                      return $queries
                                                        .employeesDiscQuery
                                                        .data[0].org_id;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__va9G
                                                      )}
                                                    >
                                                      {"org_id"}
                                                    </div>
                                                  }
                                                  name={"org_id"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input7
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input7", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input7", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input7.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input7"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input7
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__p4Cge
                                                  )}
                                                  hidden={true}
                                                  initialValue={(() => {
                                                    try {
                                                      return $queries
                                                        .employeesDiscQuery
                                                        .data[0].id;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={"employee_id"}
                                                  name={"employee_id"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input8
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input8", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input8", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input8.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input8"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input8
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__nl4D
                                                  )}
                                                  hidden={true}
                                                  initialValue={(() => {
                                                    try {
                                                      return $ctx.auth.id;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={"acting_leader"}
                                                  name={"acting_leader"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input9
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input9", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input9", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input9.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input9"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input9
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <AntdButton
                                                  data-plasmic-name={"button"}
                                                  data-plasmic-override={
                                                    overrides.button
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button
                                                  )}
                                                  submitsForm={true}
                                                  type={"primary"}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__y0Lnl
                                                    )}
                                                  >
                                                    {"Submit"}
                                                  </div>
                                                </AntdButton>
                                              </FormWrapper>
                                            );
                                          })()}
                                        </AntdModal>
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"frame6"}
                                      data-plasmic-override={overrides.frame6}
                                      className={classNames(
                                        projectcss.all,
                                        sty.frame6
                                      )}
                                    >
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                        (() => {
                                          try {
                                            return $queries.discActions.data;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const action = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <SlideoutListItem2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.slideoutListItem2__o7OIj
                                              )}
                                              date2={
                                                <div
                                                  data-plasmic-name={"date2"}
                                                  data-plasmic-override={
                                                    overrides.date2
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.date2
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return action.action_date;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "10/2/2025";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              }
                                              disciplinaryAction={true}
                                              documentingLeader={
                                                <div
                                                  data-plasmic-name={"leader2"}
                                                  data-plasmic-override={
                                                    overrides.leader2
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.leader2
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return action.leader_name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Leader Name";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              }
                                              itemName={
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return action.action;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Item Name";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              }
                                              key={currentIndex}
                                            />
                                          );
                                        }
                                      )}
                                      {(() => {
                                        try {
                                          return (
                                            ($queries.discActions.data ?? [])
                                              .length === 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"listItem2"}
                                          data-plasmic-override={
                                            overrides.listItem2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.listItem2
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"contents2"}
                                            data-plasmic-override={
                                              overrides.contents2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.contents2
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"content12"}
                                              data-plasmic-override={
                                                overrides.content12
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.content12
                                              )}
                                            >
                                              <div
                                                data-plasmic-name={
                                                  "listItemDetails2"
                                                }
                                                data-plasmic-override={
                                                  overrides.listItemDetails2
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.listItemDetails2
                                                )}
                                              >
                                                <div
                                                  data-plasmic-name={"text25"}
                                                  data-plasmic-override={
                                                    overrides.text25
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.text25
                                                  )}
                                                >
                                                  {renderPlasmicSlot({
                                                    defaultContents:
                                                      "No disciplinary actions in the last 90 days",
                                                    value: args.itemName2,
                                                    className: classNames(
                                                      sty.slotTargetItemName2
                                                    )
                                                  })}
                                                </div>
                                              </div>
                                              <div
                                                data-plasmic-name={"points2"}
                                                data-plasmic-override={
                                                  overrides.points2
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.points2
                                                )}
                                              >
                                                {renderPlasmicSlot({
                                                  defaultContents: (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__wsOmu
                                                      )}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__beuRy
                                                        )}
                                                      >
                                                        {"10"}
                                                      </div>
                                                    </div>
                                                  ),
                                                  value: args.pointValue5,
                                                  className: classNames(
                                                    sty.slotTargetPointValue5
                                                  )
                                                })}
                                                <div
                                                  data-plasmic-name={
                                                    "pointsText2"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.pointsText2
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.pointsText2
                                                  )}
                                                >
                                                  {"points"}
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  </div>
                                </div>
                              </TabContent>
                            </div>
                          </div>
                        )}
                      </DataCtxReader__>
                    </TabsContainer>
                  </div>
                </div>
              </div>
            </div>
          </DrawerV2>
        </RedirectIf>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menuNavigation",
    "redirectIf",
    "verticalStack",
    "disciplineTable",
    "verticalStack2",
    "disciplineActionsTable",
    "drawerV2",
    "content2",
    "textAndSupportingText2",
    "textAndOnlineIndicator",
    "text2",
    "supportingText2",
    "panel",
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  menuNavigation: ["menuNavigation"],
  redirectIf: [
    "redirectIf",
    "verticalStack",
    "disciplineTable",
    "verticalStack2",
    "disciplineActionsTable",
    "drawerV2",
    "content2",
    "textAndSupportingText2",
    "textAndOnlineIndicator",
    "text2",
    "supportingText2",
    "panel",
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  verticalStack: ["verticalStack", "disciplineTable"],
  disciplineTable: ["disciplineTable"],
  verticalStack2: ["verticalStack2", "disciplineActionsTable"],
  disciplineActionsTable: ["disciplineActionsTable"],
  drawerV2: [
    "drawerV2",
    "content2",
    "textAndSupportingText2",
    "textAndOnlineIndicator",
    "text2",
    "supportingText2",
    "panel",
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  content2: [
    "content2",
    "textAndSupportingText2",
    "textAndOnlineIndicator",
    "text2",
    "supportingText2"
  ],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "textAndOnlineIndicator",
    "text2",
    "supportingText2"
  ],
  textAndOnlineIndicator: ["textAndOnlineIndicator", "text2"],
  text2: ["text2"],
  supportingText2: ["supportingText2"],
  panel: [
    "panel",
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  header: [
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  container: [
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  statistics: [
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  tabUnderline: ["tabUnderline"],
  pathwayContent: ["pathwayContent"],
  peContent: ["peContent"],
  evalsContent: ["evalsContent"],
  disciplineContent: [
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  discipline: [
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg",
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  row: ["row", "text13"],
  text13: ["text13"],
  row2: [
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2"
  ],
  metricItem: [
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number"
  ],
  headingAndNumber: ["headingAndNumber", "heading", "numberAndBadge", "number"],
  heading: ["heading"],
  numberAndBadge: ["numberAndBadge", "number"],
  number: ["number"],
  metricItem2: [
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2"
  ],
  headingAndNumber2: [
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2"
  ],
  heading2: ["heading2"],
  numberAndBadge2: ["numberAndBadge2", "number2"],
  number2: ["number2"],
  inputAndText: ["inputAndText", "iconAndText", "text14"],
  iconAndText: ["iconAndText", "text14"],
  text14: ["text14"],
  frame1: [
    "frame1",
    "date4",
    "leader4",
    "informed4",
    "pointValue8",
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText"
  ],
  date4: ["date4"],
  leader4: ["leader4"],
  informed4: ["informed4"],
  pointValue8: ["pointValue8"],
  listItem: [
    "listItem",
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText"
  ],
  contents: [
    "contents",
    "content11",
    "listItemDetails",
    "text24",
    "points",
    "pointsText"
  ],
  content11: ["content11", "listItemDetails", "text24", "points", "pointsText"],
  listItemDetails: ["listItemDetails", "text24"],
  text24: ["text24"],
  points: ["points", "pointsText"],
  pointsText: ["pointsText"],
  inputAndText2: [
    "inputAndText2",
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg"
  ],
  iconAndText2: [
    "iconAndText2",
    "text27",
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg"
  ],
  text27: ["text27"],
  modal: [
    "modal",
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button",
    "svg"
  ],
  form: [
    "form",
    "input",
    "select",
    "timePicker",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "button"
  ],
  input: ["input"],
  select: ["select"],
  timePicker: ["timePicker"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  input8: ["input8"],
  input9: ["input9"],
  button: ["button"],
  svg: ["svg"],
  frame6: [
    "frame6",
    "leader2",
    "date2",
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  leader2: ["leader2"],
  date2: ["date2"],
  listItem2: [
    "listItem2",
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  contents2: [
    "contents2",
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  content12: [
    "content12",
    "listItemDetails2",
    "text25",
    "points2",
    "pointsText2"
  ],
  listItemDetails2: ["listItemDetails2", "text25"],
  text25: ["text25"],
  points2: ["points2", "pointsText2"],
  pointsText2: ["pointsText2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuNavigation: typeof MenuNavigation;
  redirectIf: typeof RedirectIf;
  verticalStack: "div";
  disciplineTable: typeof DisciplineTable;
  verticalStack2: "div";
  disciplineActionsTable: typeof DisciplineActionsTable;
  drawerV2: typeof DrawerV2;
  content2: "div";
  textAndSupportingText2: "div";
  textAndOnlineIndicator: "div";
  text2: "div";
  supportingText2: "div";
  panel: "div";
  header: "div";
  container: "div";
  statistics: "div";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  pathwayContent: typeof TabContent;
  peContent: typeof TabContent;
  evalsContent: typeof TabContent;
  disciplineContent: typeof TabContent;
  discipline: "div";
  row: "div";
  text13: "div";
  row2: "div";
  metricItem: "div";
  headingAndNumber: "div";
  heading: "div";
  numberAndBadge: "div";
  number: "div";
  metricItem2: "div";
  headingAndNumber2: "div";
  heading2: "div";
  numberAndBadge2: "div";
  number2: "div";
  inputAndText: "div";
  iconAndText: "div";
  text14: "div";
  frame1: "div";
  date4: "div";
  leader4: "div";
  informed4: "div";
  pointValue8: "div";
  listItem: "div";
  contents: "div";
  content11: "div";
  listItemDetails: "div";
  text24: "div";
  points: "div";
  pointsText: "div";
  inputAndText2: "div";
  iconAndText2: "div";
  text27: "div";
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  select: typeof AntdSelect;
  timePicker: typeof AntdDatePicker;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  input9: typeof AntdInput;
  button: typeof AntdButton;
  svg: "svg";
  frame6: "div";
  leader2: "div";
  date2: "div";
  listItem2: "div";
  contents2: "div";
  content12: "div";
  listItemDetails2: "div";
  text25: "div";
  points2: "div";
  pointsText2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDiscipline__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDiscipline__VariantsArgs;
    args?: PlasmicDiscipline__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicDiscipline__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicDiscipline__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDiscipline__ArgProps,
          internalVariantPropNames: PlasmicDiscipline__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDiscipline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDiscipline";
  } else {
    func.displayName = `PlasmicDiscipline.${nodeName}`;
  }
  return func;
}

export const PlasmicDiscipline = Object.assign(
  // Top-level PlasmicDiscipline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuNavigation: makeNodeComponent("menuNavigation"),
    redirectIf: makeNodeComponent("redirectIf"),
    verticalStack: makeNodeComponent("verticalStack"),
    disciplineTable: makeNodeComponent("disciplineTable"),
    verticalStack2: makeNodeComponent("verticalStack2"),
    disciplineActionsTable: makeNodeComponent("disciplineActionsTable"),
    drawerV2: makeNodeComponent("drawerV2"),
    content2: makeNodeComponent("content2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    textAndOnlineIndicator: makeNodeComponent("textAndOnlineIndicator"),
    text2: makeNodeComponent("text2"),
    supportingText2: makeNodeComponent("supportingText2"),
    panel: makeNodeComponent("panel"),
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    statistics: makeNodeComponent("statistics"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    pathwayContent: makeNodeComponent("pathwayContent"),
    peContent: makeNodeComponent("peContent"),
    evalsContent: makeNodeComponent("evalsContent"),
    disciplineContent: makeNodeComponent("disciplineContent"),
    discipline: makeNodeComponent("discipline"),
    row: makeNodeComponent("row"),
    text13: makeNodeComponent("text13"),
    row2: makeNodeComponent("row2"),
    metricItem: makeNodeComponent("metricItem"),
    headingAndNumber: makeNodeComponent("headingAndNumber"),
    heading: makeNodeComponent("heading"),
    numberAndBadge: makeNodeComponent("numberAndBadge"),
    number: makeNodeComponent("number"),
    metricItem2: makeNodeComponent("metricItem2"),
    headingAndNumber2: makeNodeComponent("headingAndNumber2"),
    heading2: makeNodeComponent("heading2"),
    numberAndBadge2: makeNodeComponent("numberAndBadge2"),
    number2: makeNodeComponent("number2"),
    inputAndText: makeNodeComponent("inputAndText"),
    iconAndText: makeNodeComponent("iconAndText"),
    text14: makeNodeComponent("text14"),
    frame1: makeNodeComponent("frame1"),
    date4: makeNodeComponent("date4"),
    leader4: makeNodeComponent("leader4"),
    informed4: makeNodeComponent("informed4"),
    pointValue8: makeNodeComponent("pointValue8"),
    listItem: makeNodeComponent("listItem"),
    contents: makeNodeComponent("contents"),
    content11: makeNodeComponent("content11"),
    listItemDetails: makeNodeComponent("listItemDetails"),
    text24: makeNodeComponent("text24"),
    points: makeNodeComponent("points"),
    pointsText: makeNodeComponent("pointsText"),
    inputAndText2: makeNodeComponent("inputAndText2"),
    iconAndText2: makeNodeComponent("iconAndText2"),
    text27: makeNodeComponent("text27"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    timePicker: makeNodeComponent("timePicker"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    frame6: makeNodeComponent("frame6"),
    leader2: makeNodeComponent("leader2"),
    date2: makeNodeComponent("date2"),
    listItem2: makeNodeComponent("listItem2"),
    contents2: makeNodeComponent("contents2"),
    content12: makeNodeComponent("content12"),
    listItemDetails2: makeNodeComponent("listItemDetails2"),
    text25: makeNodeComponent("text25"),
    points2: makeNodeComponent("points2"),
    pointsText2: makeNodeComponent("pointsText2"),

    // Metadata about props expected for PlasmicDiscipline
    internalVariantProps: PlasmicDiscipline__VariantProps,
    internalArgProps: PlasmicDiscipline__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Levelset.io",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDiscipline;
/* prettier-ignore-end */
