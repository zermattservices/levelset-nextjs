/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: 9R-HbnfzAckM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import ProfileSlideout from "../../ProfileSlideout"; // plasmic-import: 8BMUJ341vUF7/component
import Drawer from "../../Drawer"; // plasmic-import: X07_K2vX34pJ/component
import Button from "../../Button"; // plasmic-import: Q_p_OyLp6IUL/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicDrawerTest.module.css"; // plasmic-import: 9R-HbnfzAckM/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: NgvRzsGXKNBq/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: pW8vcF-YVuW-/icon

createPlasmicElementProxy;

export type PlasmicDrawerTest__VariantMembers = {};
export type PlasmicDrawerTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawerTest__VariantsArgs;
export const PlasmicDrawerTest__VariantProps = new Array<VariantPropType>();

export type PlasmicDrawerTest__ArgsType = {};
type ArgPropType = keyof PlasmicDrawerTest__ArgsType;
export const PlasmicDrawerTest__ArgProps = new Array<ArgPropType>();

export type PlasmicDrawerTest__OverridesType = {
  drawer?: Flex__<typeof AntdDrawer>;
  freeBox?: Flex__<"div">;
  profileSlideout?: Flex__<typeof ProfileSlideout>;
  drawer2?: Flex__<typeof Drawer>;
};

export interface DefaultDrawerTestProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDrawerTest__RenderFunc(props: {
  variants: PlasmicDrawerTest__VariantsArgs;
  args: PlasmicDrawerTest__ArgsType;
  overrides: PlasmicDrawerTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "drawer2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <AntdDrawer
      data-plasmic-name={"drawer"}
      data-plasmic-override={overrides.drawer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.drawer
      )}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames
      )}
      drawerBodyClassName={classNames({ [sty["pcls_Q8UTYHKCWnSm"]]: true })}
      drawerContentWrapperClassName={classNames({
        [sty["pcls_KyCFaDuYf8vA"]]: true
      })}
      drawerHeaderClassName={classNames({ [sty["pcls_T1hS5Fg4IiAl"]]: true })}
      drawerMaskClassName={classNames({ [sty["pcls_kArdZVMrWJGO"]]: true })}
      drawerScopeClassName={sty["drawer__drawer"]}
      forceRender={false}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["drawer", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["drawer", "open"])}
      placement={"right"}
      title={"Drawer title"}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <ProfileSlideout
          data-plasmic-name={"profileSlideout"}
          data-plasmic-override={overrides.profileSlideout}
          className={classNames("__wab_instance", sty.profileSlideout)}
        />
      </div>
      <Drawer
        data-plasmic-name={"drawer2"}
        data-plasmic-override={overrides.drawer2}
        className={classNames("__wab_instance", sty.drawer2)}
        isOpen={generateStateValueProp($state, ["drawer2", "isOpen"])}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["drawer2", "isOpen"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />
    </AntdDrawer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  drawer: ["drawer", "freeBox", "profileSlideout", "drawer2"],
  freeBox: ["freeBox", "profileSlideout"],
  profileSlideout: ["profileSlideout"],
  drawer2: ["drawer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  drawer: typeof AntdDrawer;
  freeBox: "div";
  profileSlideout: typeof ProfileSlideout;
  drawer2: typeof Drawer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawerTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawerTest__VariantsArgs;
    args?: PlasmicDrawerTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicDrawerTest__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicDrawerTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrawerTest__ArgProps,
          internalVariantPropNames: PlasmicDrawerTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrawerTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "drawer") {
    func.displayName = "PlasmicDrawerTest";
  } else {
    func.displayName = `PlasmicDrawerTest.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawerTest = Object.assign(
  // Top-level PlasmicDrawerTest renders the root element
  makeNodeComponent("drawer"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    profileSlideout: makeNodeComponent("profileSlideout"),
    drawer2: makeNodeComponent("drawer2"),

    // Metadata about props expected for PlasmicDrawerTest
    internalVariantProps: PlasmicDrawerTest__VariantProps,
    internalArgProps: PlasmicDrawerTest__ArgProps
  }
);

export default PlasmicDrawerTest;
/* prettier-ignore-end */
