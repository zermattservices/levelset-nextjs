/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: DhQCv3DKjDwJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuNavigation from "../../MenuNavigation"; // plasmic-import: eJlFBj1x_mCN/component
import DashboardSubmenu from "../../DashboardSubmenu"; // plasmic-import: DnrJ08NISsSS/component
import { RedirectIf } from "../../CodeComponents/RedirectIf"; // plasmic-import: gEWHFHS2fu7I/codeComponent
import MetricCard from "../../MetricCard"; // plasmic-import: 7uoOAZgc5EOu/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: DhQCv3DKjDwJ/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("children");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  menuNavigation?: Flex__<typeof MenuNavigation>;
  redirectIf?: Flex__<typeof RedirectIf>;
  img?: Flex__<typeof PlasmicImg__>;
  _360Stack?: Flex__<"div">;
  blurredStack?: Flex__<"div">;
  whedStack?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuNavigation.locationName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Buda FSU"
      },
      {
        path: "menuNavigation.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.first_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.userRole",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.role;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "menuNavigation.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.auth.last_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <MenuNavigation
          data-plasmic-name={"menuNavigation"}
          data-plasmic-override={overrides.menuNavigation}
          className={classNames("__wab_instance", sty.menuNavigation)}
          firstName={generateStateValueProp($state, [
            "menuNavigation",
            "firstName"
          ])}
          lastName={generateStateValueProp($state, [
            "menuNavigation",
            "lastName"
          ])}
          locationName={generateStateValueProp($state, [
            "menuNavigation",
            "locationName"
          ])}
          onFirstNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "firstName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLastNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "lastName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLocationNameChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "locationName"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onUserRoleChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "menuNavigation",
              "userRole"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          userRole={generateStateValueProp($state, [
            "menuNavigation",
            "userRole"
          ])}
        />

        <RedirectIf
          data-plasmic-name={"redirectIf"}
          data-plasmic-override={overrides.redirectIf}
          className={classNames("__wab_instance", sty.redirectIf)}
          condition={$ctx.auth && !!$ctx.auth.email}
          onFalse={async () => {
            const $steps = {};

            $steps["goToLoginPage"] = true
              ? (() => {
                  const actionArgs = { destination: `/auth/login` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToLoginPage"] != null &&
              typeof $steps["goToLoginPage"] === "object" &&
              typeof $steps["goToLoginPage"].then === "function"
            ) {
              $steps["goToLoginPage"] = await $steps["goToLoginPage"];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dtJkS)}>
            <div className={classNames(projectcss.all, sty.freeBox__sheik)}>
              <div className={classNames(projectcss.all, sty.freeBox__bUa1M)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7DbEj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jTmb
                    )}
                  >
                    {"Welcome back, "}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__d45Ks)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.menuNavigation.firstName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Reece";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ),
                      value: args.children,
                      className: classNames(sty.slotTargetChildren)
                    })}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tEkmO)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y0FBf
                    )}
                  >
                    {
                      "Here\u2019s an overview of your organization\u2019s talent health."
                    }
                  </div>
                </div>
              </div>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"150px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/levelset_v_2/images/cfaBudaLogoPng.png",
                  fullWidth: 2048,
                  fullHeight: 1325,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vZ6X)}>
            <div className={classNames(projectcss.all, sty.freeBox__wp8V3)}>
              <div
                data-plasmic-name={"_360Stack"}
                data-plasmic-override={overrides._360Stack}
                className={classNames(projectcss.all, sty._360Stack)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ipxsc)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rksQk
                    )}
                  >
                    {"360\u00b0 Overview"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___56Wts)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__thp47)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fqNlw)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPea"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/positional-excellence`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPea"] != null &&
                          typeof $steps["goToPea"] === "object" &&
                          typeof $steps["goToPea"].then === "function"
                        ) {
                          $steps["goToPea"] = await $steps["goToPea"];
                        }
                      }}
                    >
                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard__x6EnB
                        )}
                        metricName={"PEA Ratings"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zfJd9)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToDiscipline"] = true
                          ? (() => {
                              const actionArgs = { destination: `/discipline` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToDiscipline"] != null &&
                          typeof $steps["goToDiscipline"] === "object" &&
                          typeof $steps["goToDiscipline"].then === "function"
                        ) {
                          $steps["goToDiscipline"] =
                            await $steps["goToDiscipline"];
                        }
                      }}
                    >
                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard__zxCMh
                        )}
                        metricName={"Accountability Points"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"blurredStack"}
                      data-plasmic-override={overrides.blurredStack}
                      className={classNames(projectcss.all, sty.blurredStack)}
                    >
                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard__cbTb
                        )}
                      />

                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard__ahd6K
                        )}
                        metricName={"Coaching Evaluations"}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"whedStack"}
                data-plasmic-override={overrides.whedStack}
                className={classNames(projectcss.all, sty.whedStack)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6YHFb)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3DmR3
                    )}
                  >
                    {"Winning Hearts Every Day (Coming Soon)"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hvq52)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1VsLt)}
                  >
                    <MetricCard
                      className={classNames(
                        "__wab_instance",
                        sty.metricCard__n5Vp1
                      )}
                      metricName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cToMc
                          )}
                        >
                          {"Attentive & Friendly Team Members"}
                        </div>
                      }
                    />

                    <MetricCard
                      className={classNames(
                        "__wab_instance",
                        sty.metricCard__nLige
                      )}
                      metricName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6CLr
                          )}
                        >
                          {"Craveable Food"}
                        </div>
                      }
                    />

                    <MetricCard
                      className={classNames(
                        "__wab_instance",
                        sty.metricCard__msF2
                      )}
                      metricName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aaKts
                          )}
                        >
                          {"Fast & Accurate Service"}
                        </div>
                      }
                    />

                    <MetricCard
                      className={classNames(
                        "__wab_instance",
                        sty.metricCard__r453M
                      )}
                      metricName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gn7Ek
                          )}
                        >
                          {"Second Mile Service"}
                        </div>
                      }
                    />

                    <MetricCard
                      className={classNames(
                        "__wab_instance",
                        sty.metricCard__zoe3T
                      )}
                      metricName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4Uzfe
                          )}
                        >
                          {"Welcoming Environment"}
                        </div>
                      }
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </RedirectIf>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menuNavigation",
    "redirectIf",
    "img",
    "_360Stack",
    "blurredStack",
    "whedStack"
  ],
  menuNavigation: ["menuNavigation"],
  redirectIf: ["redirectIf", "img", "_360Stack", "blurredStack", "whedStack"],
  img: ["img"],
  _360Stack: ["_360Stack", "blurredStack"],
  blurredStack: ["blurredStack"],
  whedStack: ["whedStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuNavigation: typeof MenuNavigation;
  redirectIf: typeof RedirectIf;
  img: typeof PlasmicImg__;
  _360Stack: "div";
  blurredStack: "div";
  whedStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuNavigation: makeNodeComponent("menuNavigation"),
    redirectIf: makeNodeComponent("redirectIf"),
    img: makeNodeComponent("img"),
    _360Stack: makeNodeComponent("_360Stack"),
    blurredStack: makeNodeComponent("blurredStack"),
    whedStack: makeNodeComponent("whedStack"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Levelset",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
