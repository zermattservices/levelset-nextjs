/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNCsaJXBZ9ykYnmvxCb8Zx
// Component: 8BMUJ341vUF7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: u704oB_4BUvT/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import SlideoutListItem2 from "../../SlideoutListItem2"; // plasmic-import: 9Efhz4aeRJA1/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../levelset_v2/plasmic_levelset_v2.module.css"; // plasmic-import: eNCsaJXBZ9ykYnmvxCb8Zx/projectcss
import sty from "./PlasmicProfileSlideout.module.css"; // plasmic-import: 8BMUJ341vUF7/css

import CheckSvgIcon from "../levelset_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: dTo8s4EZdHvA/icon
import IconIcon from "../levelset_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: CEbmjO_n9jaW/icon
import DividerIcon from "./icons/PlasmicIcon__Divider"; // plasmic-import: FnQVtjsAqctc/icon
import Divider2Icon from "./icons/PlasmicIcon__Divider2"; // plasmic-import: SrOGhElNYzm6/icon

createPlasmicElementProxy;

export type PlasmicProfileSlideout__VariantMembers = {};
export type PlasmicProfileSlideout__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileSlideout__VariantsArgs;
export const PlasmicProfileSlideout__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfileSlideout__ArgsType = {};
type ArgPropType = keyof PlasmicProfileSlideout__ArgsType;
export const PlasmicProfileSlideout__ArgProps = new Array<ArgPropType>();

export type PlasmicProfileSlideout__OverridesType = {
  root?: Flex__<"div">;
  panel?: Flex__<"div">;
  header?: Flex__<"div">;
  container?: Flex__<"div">;
  statistics?: Flex__<"div">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  pathwayContent?: Flex__<typeof TabContent>;
  peContent?: Flex__<typeof TabContent>;
  evalsContent?: Flex__<typeof TabContent>;
  disciplineContent?: Flex__<typeof TabContent>;
  discipline?: Flex__<"div">;
  row?: Flex__<"div">;
  text13?: Flex__<"div">;
  row2?: Flex__<"div">;
  metricItem?: Flex__<"div">;
  headingAndNumber?: Flex__<"div">;
  heading?: Flex__<"div">;
  numberAndBadge?: Flex__<"div">;
  number?: Flex__<"div">;
  metricItem2?: Flex__<"div">;
  headingAndNumber2?: Flex__<"div">;
  heading2?: Flex__<"div">;
  numberAndBadge2?: Flex__<"div">;
  number2?: Flex__<"div">;
  inputAndText?: Flex__<"div">;
  iconAndText?: Flex__<"div">;
  text14?: Flex__<"div">;
  frame1?: Flex__<"div">;
  pointValue4?: Flex__<"div">;
  inputAndText2?: Flex__<"div">;
  iconAndText2?: Flex__<"div">;
  text27?: Flex__<"div">;
  frame6?: Flex__<"div">;
};

export interface DefaultProfileSlideoutProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileSlideout__RenderFunc(props: {
  variants: PlasmicProfileSlideout__VariantsArgs;
  args: PlasmicProfileSlideout__ArgsType;
  overrides: PlasmicProfileSlideout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"panel"}
        data-plasmic-override={overrides.panel}
        className={classNames(projectcss.all, sty.panel)}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <div
              data-plasmic-name={"statistics"}
              data-plasmic-override={overrides.statistics}
              className={classNames(projectcss.all, sty.statistics)}
            >
              <TabsContainer
                data-plasmic-name={"tabsContainer"}
                data-plasmic-override={overrides.tabsContainer}
                initialKey={"tab4"}
                mountMode={"mountAllEagerly"}
                previewAll={false}
                previewKey={"tab4"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nkkHv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vJdT6
                        )}
                      >
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton___853G
                          )}
                          tabKey={"tab1"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__rokb
                            )}
                            color={(() => {
                              try {
                                return $ctx.currentTabKey === "tab1"
                                  ? "green"
                                  : "softSand";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "green";
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__j3I9Q
                              )}
                            >
                              {"Pathway"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__cHyw
                          )}
                          tabKey={"tab2"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__dvzP9
                            )}
                            color={(() => {
                              try {
                                return $ctx.currentTabKey === "tab2"
                                  ? "green"
                                  : "softSand";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "green";
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9HvWm
                              )}
                            >
                              {"Positional Excellence"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__ys00
                          )}
                          tabKey={"tab3"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__xW3GE
                            )}
                            color={(() => {
                              try {
                                return $ctx.currentTabKey === "tab3"
                                  ? "green"
                                  : "softSand";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "green";
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3WsRe
                              )}
                            >
                              {"Evaluations"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__viQnu
                          )}
                          tabKey={"tab4"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__yuqKt
                            )}
                            color={(() => {
                              try {
                                return $ctx.currentTabKey === "tab4"
                                  ? "green"
                                  : "softSand";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "green";
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pD265
                              )}
                            >
                              {"Discipline"}
                            </div>
                          </Button>
                        </TabButton>
                        <TabUnderline
                          data-plasmic-name={"tabUnderline"}
                          data-plasmic-override={overrides.tabUnderline}
                          className={classNames(
                            "__wab_instance",
                            sty.tabUnderline
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nDqIn
                        )}
                      >
                        <TabContent
                          data-plasmic-name={"pathwayContent"}
                          data-plasmic-override={overrides.pathwayContent}
                          className={classNames(
                            "__wab_instance",
                            sty.pathwayContent
                          )}
                          tabKey={"tab1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ghLeA
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__q5Mt
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.currentTabKey;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Some content for tab 1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </TabContent>
                        <TabContent
                          data-plasmic-name={"peContent"}
                          data-plasmic-override={overrides.peContent}
                          className={classNames(
                            "__wab_instance",
                            sty.peContent
                          )}
                          tabKey={"tab2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pChx
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kcpU6
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.currentTabKey;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Some content for tab 1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </TabContent>
                        <TabContent
                          data-plasmic-name={"evalsContent"}
                          data-plasmic-override={overrides.evalsContent}
                          className={classNames(
                            "__wab_instance",
                            sty.evalsContent
                          )}
                          tabKey={"tab3"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jXaQy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___35Qv1
                              )}
                            >
                              {"Some content for tab 1"}
                            </div>
                          </div>
                        </TabContent>
                        <TabContent
                          data-plasmic-name={"disciplineContent"}
                          data-plasmic-override={overrides.disciplineContent}
                          className={classNames(
                            "__wab_instance",
                            sty.disciplineContent
                          )}
                          tabKey={"tab4"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0PldT
                            )}
                          >
                            <div
                              data-plasmic-name={"discipline"}
                              data-plasmic-override={overrides.discipline}
                              className={classNames(
                                projectcss.all,
                                sty.discipline
                              )}
                            >
                              <DividerIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__zGiBg
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"row"}
                                data-plasmic-override={overrides.row}
                                className={classNames(projectcss.all, sty.row)}
                              >
                                <div
                                  data-plasmic-name={"text13"}
                                  data-plasmic-override={overrides.text13}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text13
                                  )}
                                >
                                  {"In the last 90 days..."}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"row2"}
                                data-plasmic-override={overrides.row2}
                                className={classNames(projectcss.all, sty.row2)}
                              >
                                <div
                                  data-plasmic-name={"metricItem"}
                                  data-plasmic-override={overrides.metricItem}
                                  className={classNames(
                                    projectcss.all,
                                    sty.metricItem
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"headingAndNumber"}
                                    data-plasmic-override={
                                      overrides.headingAndNumber
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.headingAndNumber
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"heading"}
                                      data-plasmic-override={overrides.heading}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.heading
                                      )}
                                    >
                                      {"Infractions"}
                                    </div>
                                    <div
                                      data-plasmic-name={"numberAndBadge"}
                                      data-plasmic-override={
                                        overrides.numberAndBadge
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.numberAndBadge
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"number"}
                                        data-plasmic-override={overrides.number}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.number
                                        )}
                                      >
                                        {"4"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  data-plasmic-name={"metricItem2"}
                                  data-plasmic-override={overrides.metricItem2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.metricItem2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"headingAndNumber2"}
                                    data-plasmic-override={
                                      overrides.headingAndNumber2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.headingAndNumber2
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"heading2"}
                                      data-plasmic-override={overrides.heading2}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.heading2
                                      )}
                                    >
                                      {"Discipline Points"}
                                    </div>
                                    <div
                                      data-plasmic-name={"numberAndBadge2"}
                                      data-plasmic-override={
                                        overrides.numberAndBadge2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.numberAndBadge2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"number2"}
                                        data-plasmic-override={
                                          overrides.number2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.number2
                                        )}
                                      >
                                        {"55"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <Divider2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rk7Ms
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"inputAndText"}
                                data-plasmic-override={overrides.inputAndText}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputAndText
                                )}
                              >
                                <div
                                  data-plasmic-name={"iconAndText"}
                                  data-plasmic-override={overrides.iconAndText}
                                  className={classNames(
                                    projectcss.all,
                                    sty.iconAndText
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"text14"}
                                    data-plasmic-override={overrides.text14}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text14
                                    )}
                                  >
                                    {"Infractions"}
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame1"}
                                data-plasmic-override={overrides.frame1}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame1
                                )}
                              >
                                <SlideoutListItem2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.slideoutListItem2__e09N4
                                  )}
                                  itemName={
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Values Violation - Humility";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  }
                                />

                                <SlideoutListItem2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.slideoutListItem2__laOi6
                                  )}
                                  itemName={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__c9Wrl
                                      )}
                                    >
                                      {"Uniform/Appearance"}
                                    </div>
                                  }
                                />

                                <SlideoutListItem2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.slideoutListItem2__im0D1
                                  )}
                                  itemName={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__csSld
                                      )}
                                    >
                                      {
                                        "Inappropriate Conduct (language, horseplay, etc)"
                                      }
                                    </div>
                                  }
                                  pointValue2={
                                    <div
                                      data-plasmic-name={"pointValue4"}
                                      data-plasmic-override={
                                        overrides.pointValue4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.pointValue4
                                      )}
                                    >
                                      {"50"}
                                    </div>
                                  }
                                />

                                <SlideoutListItem2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.slideoutListItem2__iQ6IM
                                  )}
                                />

                                <SlideoutListItem2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.slideoutListItem2___6G0C5
                                  )}
                                />
                              </div>
                              <Divider2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__z2VN
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"inputAndText2"}
                                data-plasmic-override={overrides.inputAndText2}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputAndText2
                                )}
                              >
                                <div
                                  data-plasmic-name={"iconAndText2"}
                                  data-plasmic-override={overrides.iconAndText2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.iconAndText2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"text27"}
                                    data-plasmic-override={overrides.text27}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text27
                                    )}
                                  >
                                    {"Disciplinary Actions"}
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame6"}
                                data-plasmic-override={overrides.frame6}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame6
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                      ? _par
                                      : [_par])([2, 3, 4]).map(
                                  (__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <SlideoutListItem2
                                        className={classNames(
                                          "__wab_instance",
                                          sty.slideoutListItem2__bxkK7
                                        )}
                                        disciplinaryAction={true}
                                        key={currentIndex}
                                      />
                                    );
                                  }
                                )}
                              </div>
                            </div>
                          </div>
                        </TabContent>
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </TabsContainer>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "panel",
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  panel: [
    "panel",
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  header: [
    "header",
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  container: [
    "container",
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  statistics: [
    "statistics",
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "pathwayContent",
    "peContent",
    "evalsContent",
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  tabUnderline: ["tabUnderline"],
  pathwayContent: ["pathwayContent"],
  peContent: ["peContent"],
  evalsContent: ["evalsContent"],
  disciplineContent: [
    "disciplineContent",
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  discipline: [
    "discipline",
    "row",
    "text13",
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2",
    "inputAndText",
    "iconAndText",
    "text14",
    "frame1",
    "pointValue4",
    "inputAndText2",
    "iconAndText2",
    "text27",
    "frame6"
  ],
  row: ["row", "text13"],
  text13: ["text13"],
  row2: [
    "row2",
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number",
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2"
  ],
  metricItem: [
    "metricItem",
    "headingAndNumber",
    "heading",
    "numberAndBadge",
    "number"
  ],
  headingAndNumber: ["headingAndNumber", "heading", "numberAndBadge", "number"],
  heading: ["heading"],
  numberAndBadge: ["numberAndBadge", "number"],
  number: ["number"],
  metricItem2: [
    "metricItem2",
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2"
  ],
  headingAndNumber2: [
    "headingAndNumber2",
    "heading2",
    "numberAndBadge2",
    "number2"
  ],
  heading2: ["heading2"],
  numberAndBadge2: ["numberAndBadge2", "number2"],
  number2: ["number2"],
  inputAndText: ["inputAndText", "iconAndText", "text14"],
  iconAndText: ["iconAndText", "text14"],
  text14: ["text14"],
  frame1: ["frame1", "pointValue4"],
  pointValue4: ["pointValue4"],
  inputAndText2: ["inputAndText2", "iconAndText2", "text27"],
  iconAndText2: ["iconAndText2", "text27"],
  text27: ["text27"],
  frame6: ["frame6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  panel: "div";
  header: "div";
  container: "div";
  statistics: "div";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  pathwayContent: typeof TabContent;
  peContent: typeof TabContent;
  evalsContent: typeof TabContent;
  disciplineContent: typeof TabContent;
  discipline: "div";
  row: "div";
  text13: "div";
  row2: "div";
  metricItem: "div";
  headingAndNumber: "div";
  heading: "div";
  numberAndBadge: "div";
  number: "div";
  metricItem2: "div";
  headingAndNumber2: "div";
  heading2: "div";
  numberAndBadge2: "div";
  number2: "div";
  inputAndText: "div";
  iconAndText: "div";
  text14: "div";
  frame1: "div";
  pointValue4: "div";
  inputAndText2: "div";
  iconAndText2: "div";
  text27: "div";
  frame6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileSlideout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileSlideout__VariantsArgs;
    args?: PlasmicProfileSlideout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicProfileSlideout__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicProfileSlideout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileSlideout__ArgProps,
          internalVariantPropNames: PlasmicProfileSlideout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileSlideout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileSlideout";
  } else {
    func.displayName = `PlasmicProfileSlideout.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileSlideout = Object.assign(
  // Top-level PlasmicProfileSlideout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    panel: makeNodeComponent("panel"),
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    statistics: makeNodeComponent("statistics"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    pathwayContent: makeNodeComponent("pathwayContent"),
    peContent: makeNodeComponent("peContent"),
    evalsContent: makeNodeComponent("evalsContent"),
    disciplineContent: makeNodeComponent("disciplineContent"),
    discipline: makeNodeComponent("discipline"),
    row: makeNodeComponent("row"),
    text13: makeNodeComponent("text13"),
    row2: makeNodeComponent("row2"),
    metricItem: makeNodeComponent("metricItem"),
    headingAndNumber: makeNodeComponent("headingAndNumber"),
    heading: makeNodeComponent("heading"),
    numberAndBadge: makeNodeComponent("numberAndBadge"),
    number: makeNodeComponent("number"),
    metricItem2: makeNodeComponent("metricItem2"),
    headingAndNumber2: makeNodeComponent("headingAndNumber2"),
    heading2: makeNodeComponent("heading2"),
    numberAndBadge2: makeNodeComponent("numberAndBadge2"),
    number2: makeNodeComponent("number2"),
    inputAndText: makeNodeComponent("inputAndText"),
    iconAndText: makeNodeComponent("iconAndText"),
    text14: makeNodeComponent("text14"),
    frame1: makeNodeComponent("frame1"),
    pointValue4: makeNodeComponent("pointValue4"),
    inputAndText2: makeNodeComponent("inputAndText2"),
    iconAndText2: makeNodeComponent("iconAndText2"),
    text27: makeNodeComponent("text27"),
    frame6: makeNodeComponent("frame6"),

    // Metadata about props expected for PlasmicProfileSlideout
    internalVariantProps: PlasmicProfileSlideout__VariantProps,
    internalArgProps: PlasmicProfileSlideout__ArgProps
  }
);

export default PlasmicProfileSlideout;
/* prettier-ignore-end */
